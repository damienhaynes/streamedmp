//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  StreamedMP setup main script file
//
//  Comments:     
//
//===========================================================================    

/////////////////////////////////////////////////////////////////////////////
//   INSTALLATION    	 MAINTENANCE           PATCH          RESUME/UPGRADE
//       |                   |                   |                   |
//       '-------------------'---------,---------'-------------------'
//                                     |
//                                 OnBegin()
//                                     |
//       ,-------------------,---------'---------,-------------------,
//       |                   |                   |                   |
// OnFirstUIBefore()  OnMaintUIBefore()  OnPatchUIBefore()  OnResumeUIBefore()
//       |                   |                   |                   |
//      ...                 ...                 ...                 ...
//       |                   |                   |                   |
//  OnFirstUIAfter()  OnMaintUIAfter()    OnPatchUIAfter()   OnResumeUIAfter()
//       |                   |                   |                   |
//       '-------------------'---------,---------'-------------------'
//                                     |
//                                   OnEnd()
//
/////////////////////////////////////////////////////////////////////////////


// Included header files ----------------------------------------------------
#include "ifx.h"

#define SKIN_NAME						"StreamedMP"
#define DEFAULT_SKIN					"Blue3wide" 

#define MEDIAPORTAL_REG_KEY  			"SOFTWARE\\Team MediaPortal\\MediaPortal"
#define MEDIAPORTALUNINSTALL_REG_KEY    "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\MediaPortal"
#define STREAMEDMP_REG_KEY  			"SOFTWARE\\StreamedMP"

#define STREAMEDMP_HOMEPAGE_URL			"http://code.google.com/p/streamedmp/" 

// Feature Defines
#define MATT_FEATURE_TVSERIES			"Main\\mattsk88TVSeries"
#define MATT_FEATURE_MOVINGPICS			"Main\\mattsk88MovingPictures"

#define SPUCK_FEATURE_TVSERIES			"Main\\spuckTVSeries"
#define SPUCK_FEATURE_MOVINGPICS		"Main\\spuckMovingPictures"

#define TVGUIDE08_FEATURE_OPTIONS		"Main\\tvguide08Options"
#define TVGUIDE12_FEATURE_OPTIONS		"Main\\tvguide12Options"

#define FONTSDEF_FEATURE_OPTIONS		"Main\\fontsDefOptions"
#define FONTSLGE_FEATURE_OPTIONS		"Main\\fontsLgeOptions"

#define TVSERIES_MULTIIMAGE_OPTION		"Main\\tvseriesMultiImageIcons"
#define TVSERIES_SINGLEIMAGE_OPTION		"Main\\tvseriesSingleImageIcons"

// Program executable defines
#define STREAMEDMP_EDITOR_FILE				INSTALLDIR^"skin"^SKIN_NAME^"streamedmp_editor.exe"
#define STREAMEDMP_SKIN_TVSERIES			INSTALLDIR^"skin"^SKIN_NAME^"TVSeries.xml"
#define STREAMEDMP_SKIN_TVSERIESSETTINGS	INSTALLDIR^"skin"^SKIN_NAME^"TVSeries.SkinSettings.xml"                  
#define MEDIAPORTAL_CONFIG_FILE				CommonAppDataFolder^"Team MediaPortal\\MediaPortal\\MediaPortal.xml"

// Version Defines
#define MEDIAPORTAL_MINNOWARN_VERSION	"1.0.0.21527" 	// 1.0.1 SVN
#define MEDIAPORTAL_MIN_VERSION			"0.9.3.20432" 	// RC3 Base

#define TVSERIES_MIN_VERSION			"2.1.3321.0"
#define MOVINGPICTURES_MIN_VERSION		"0.7.0.485"

// Dialogs
#define RES_DLG_TVSERIESSELECT			13000
#define RES_DLG_MOVINGPICSSELECT		13001
#define RES_DLG_OPTIONS					13002
#define RES_DLG_TVSERIESADVANCED		13003

// Dialog Controls
#define RES_RADIO_CHOICE1				1400
#define RES_RADIO_CHOICE2				1401             
#define RES_COMBO_SERIESLAYOUT			1402 
#define RES_BUTTON_TVSERIESADVANCED		1404	

#define RES_CHECK_TOTALEPCOUNT			1304
#define RES_CHECK_LISTIMAGES			1305
#define RES_COMBO_LISTIMAGESSTYLE		1308
#define RES_CHECK_ARTWORKICONS			1307

#define RES_RADIO_TVGUIDE08ROWS 		1325
#define RES_RADIO_TVGUIDE12ROWS       	1326  

#define RES_COMBO_FONTS					1401 
#define RES_CHECK_SKINDEFAULT			1402
#define RES_CHECK_USEBASICHOME			1405

// Common Dialog Controls
#define RES_PBUT_NEXT         			1   			// ID of Next button
#define RES_PBUT_CLOSE		  			2     			// ID of the (X) button
#define RES_PBUT_CANCEL       			9   			// ID of Cancel button
#define RES_PBUT_BACK        			12   			// ID of Back button

// CSIDL values
#ifndef CSIDL_PROFILE
	#define CSIDL_PROFILE          		0x0028      
#endif
         
// Prototype Functions         
prototype VOID 		CleanCache();
prototype NUMBER 	GetMediaPortalProgramDir(BYREF STRING);
prototype NUMBER 	GetMediaPortalConfigDir(BYREF STRING); 
prototype VOID 		SetDefaults();
prototype VOID 		UpdateSettings(); 
prototype NUMBER	GetFileVersion(BYREF STRING, STRING);
prototype VOID		CheckMPVersion();		
prototype NUMBER	CheckPluginVersions(BYREF STRING);
prototype NUMBER	LaunchBrowser(STRING);   
prototype BOOL 		IsMajorUpgrade(BYREF STRING, BYREF STRING, BYREF BOOL);
prototype VOID		MajorUpgradeCleanup();
prototype VOID		GetCachedInstallDir();  
prototype VOID		UninstallCleanup();       
prototype NUMBER	TVSeriesLayout(BYREF STRING,BOOL);
prototype NUMBER 	SHFolder.SHGetFolderPathA(HWND,NUMBER,NUMBER,NUMBER,BYREF STRING);
prototype VOID		CleanVirtualStoreDir();
prototype NUMBER	GetXMLProperty(STRING,STRING,BYREF STRING);
prototype NUMBER	SetXMLProperty(STRING,STRING,STRING);
prototype VOID		TVSeriesIcons(BOOL);
prototype VOID		TVSeriesImageStyle(BOOL);    
prototype VOID		EnableControl(STRING, NUMBER, BOOL);
prototype NUMBER	SetMPXMLProperty(STRING,STRING,STRING);
prototype NUMBER	GetMPXMLProperty(STRING,STRING,BYREF STRING);
prototype BOOL 		GetInstalledVersion(STRING,BYREF STRING);

prototype NUMBER 	ShowSelectTVSeries(BOOL);
prototype NUMBER 	ShowSelectMovingPics(BOOL);
prototype NUMBER 	ShowSelectOptions(BOOL);
prototype NUMBER 	ShowTVSeriesAdvanced(BOOL);

// Global Variables
BOOL g_bTVSeriesDefault;
BOOL g_bMovingPicturesDefault;
BOOL g_bMajorUpgrade;
BOOL g_bSetAsDefaultSkin;
BOOL g_bShowTotalEpisodeCount;
BOOL g_bShowArtworkIcons;
BOOL g_bShowIconsInListView;   
BOOL g_bShowUnWatchedOnlyInListImage; 
BOOL g_bStartBasicHome;

STRING g_sMajorUpgradeGUID;
STRING g_sTVGuideSize;  
STRING g_sFontSize;
STRING g_sDownloadInstallDir;   
STRING g_sSeriesLayout;

//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes.
//---------------------------------------------------------------------------
function OnBegin()
	STRING szVersion, szUpgradeMessage;
	NUMBER nResult;
	BOOL bUpgradeSupported; 
begin 
 	
	// See if older version is installed
	g_bMajorUpgrade = IsMajorUpgrade(szVersion, g_sMajorUpgradeGUID, bUpgradeSupported);
	if g_bMajorUpgrade then
		// check if version supports upgrades
		if bUpgradeSupported then
			szUpgradeMessage = "Setup is about to perform a Major Upgrade from: v" + szVersion + "\nThe previous installation will " +
							   "be removed, Do you wish to continue?";
			nResult = SprintfBox( YES|NO|CANCEL,"Major Upgrade",szUpgradeMessage, INFORMATION);
			if (nResult != IDYES) then
				abort;
			endif;
		else
		 	szUpgradeMessage = "Setup cannot perform an Upgrade from: v" + szVersion + "\nPlease uninstall from the Add\\Remove programs " +
							   "and run setup again.";
			MessageBox(szUpgradeMessage,INFORMATION);
			abort;							   
		endif;
	endif; 
	                                                              
	SetDefaults();		
end;           

function VOID SetDefaults()
	STRING svValue, svString;
	NUMBER nvType, nvSize;
begin 
	 	
 	// Set the installation directory to one currently used by MediaPortal
	if (GetMediaPortalProgramDir(svValue) < 0) then
		svValue = ProgramFilesFolder^"Team MediaPortal\\MediaPortal";	
	endif;
	INSTALLDIR = svValue;
	
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// Read TVSeries Default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTTVSERIES",nvType,svValue,nvSize) < 0) then
		svValue = "1";		
	endif;	 
	if svValue = "1" then
		g_bTVSeriesDefault = TRUE;			
	endif;
	
	// Read Moving Pictures Default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTMOVINGPICS",nvType,svValue,nvSize) < 0) then
		svValue = "1";		
	endif;	
	if svValue = "1" then
		g_bMovingPicturesDefault = TRUE;			
	endif;
	
	// Read TVGuide Size default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"TVGUIDESIZE",nvType,g_sTVGuideSize,nvSize) < 0) then
		g_sTVGuideSize = "12";		
	endif;	 
	
	// Read Font Size default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"FONTSIZE",nvType,g_sFontSize,nvSize) < 0) then
		g_sFontSize = "Default";		
	endif;
	
	// Read Series Layout default	
	if (TVSeriesLayout(svValue,FALSE) < 0) then
		g_sSeriesLayout = "List Posters";		
	else
		StrToLower(svString,svValue);	
		switch (svString)
			case "listbanners":
				g_sSeriesLayout = "List Banners";
			case "listposters":
				g_sSeriesLayout = "List Posters";
			case "widebanners":
				g_sSeriesLayout = "Wide Banners";
			case "filmstrip":
				g_sSeriesLayout = "Filmstrip";
			default:
				g_sSeriesLayout = "List Posters";	
		endswitch;
			
	endif;
	
	// Determine if 'Total Episode Count' fields are added to List View
	// Just Check Series, but set for both Series & Season
	if (GetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item3", svValue) < 0) then
		g_bShowTotalEpisodeCount = TRUE;
	else
		if svValue = "SeriesTotalEpisodes_1" || svValue = "SeriesTotalEpisodes_2" || svValue = "SeriesEpCount" then
			g_bShowTotalEpisodeCount = TRUE;	
		endif;
	endif;
	
	// Determine if 'Watched/Unwatched' Icons are added to List View
	// Just Check Series, but set for both Series & Season
	if (GetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item1", svValue) < 0) then
		g_bShowIconsInListView = TRUE;
	else
		if svValue = "SeriesWatchedAndUnWatched" || svValue = "SeriesUnWatched" || svValue = "SeriesIcons" then
			g_bShowIconsInListView = TRUE;		
		endif;
	endif;		
	
	// Read Icons in Artwork default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"ICONSINARTWORK",nvType,svValue,nvSize) < 0) then
		svValue = "1";		
	endif;	
	if svValue = "1" then
		g_bShowArtworkIcons = TRUE;			
	endif;
	
	// Read Watched/Unwatched List Image Style
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"WATCHEDIMAGESTYLE",nvType,svValue,nvSize) < 0) then
		svValue = "0";		
	endif;	
	if svValue = "1" then
		g_bShowUnWatchedOnlyInListImage = TRUE;			
	endif;
	
	// Get Start With Basic Home property
	if GetMPXMLProperty("general","startbasichome", svValue) < 0 then
		g_bStartBasicHome = FALSE;
	else
		if svValue = "yes" then
			g_bStartBasicHome = TRUE;
		endif;
	endif;	
		
	g_bSetAsDefaultSkin = TRUE; // Should always be default	
	
end;

function BOOL IsMajorUpgrade(sMajorUpgradeVersion, sMajorUpgradeGUID, bUpgradeSupported)
	STRING szKey;
	NUMBER nvBufferSize, nResult;
	BOOL bUpgrade;
begin
    nvBufferSize = 256;
    bUpgrade = TRUE;
    
    // Major Upgrades requires a change to the ProductCode GUID and Version every release
    // Don't change the UpgradeCode
    
    // Get Properties for MajorUpgrade
    // Returns the GUID in svMajorUpgrade of previous install             
 	MsiGetProperty(ISMSI_HANDLE,"MAJORUPGRADE_01",sMajorUpgradeGUID,nvBufferSize);
 	if StrLength(sMajorUpgradeGUID) = 0 then
 		return FALSE;
 	endif;
 	
 	// Check if there is any versions we dont want to support upgrades on		
	if sMajorUpgradeGUID = "{7A7760CC-256A-4ECD-BE3F-E7644FAD5DA8}" then
		
		sMajorUpgradeVersion = "0.1.167";
		bUpgradeSupported = FALSE;		
		return TRUE;
	
	elseif sMajorUpgradeGUID = "{437C996D-2A3D-4809-89F7-E25A66A463B1}" then
		sMajorUpgradeVersion = "0.2.215";
		bUpgradeSupported = FALSE;		
		return TRUE;
	
	elseif sMajorUpgradeGUID = "{E8B2D59B-84CD-4817-961B-BEA89324BAB3}" then
		sMajorUpgradeVersion = "0.2.219";
		bUpgradeSupported = TRUE;		
		return TRUE;
	
	else
		// Return the previous product version if GUID matches
	 	bUpgradeSupported = GetInstalledVersion(sMajorUpgradeGUID,sMajorUpgradeVersion);
		return bUpgradeSupported;
			
	endif;   
		
 	return FALSE;
end;

function BOOL GetInstalledVersion(sGUID, sMajorUpgradeVersion)
	NUMBER nvType, nvSize;
	STRING svValue;
begin
    
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
        
    if RegDBKeyExist(STREAMEDMP_REG_KEY) < 0 then
    	return FALSE;
    endif;
    
    if RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"PRODUCTGUID",nvType,svValue,nvSize) < 0 then
    	return FALSE;
    else
        if svValue != sGUID then
        	return FALSE;
        endif;
        
        RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"VERSION",nvType,sMajorUpgradeVersion,nvSize)        	;
    endif;
    
    return TRUE;
end;
    
//---------------------------------------------------------------------------
// OnFirstUIBefore
//
// The OnFirstUIBefore event is called by the framework when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    NUMBER nResult, nSetupType, nvSize, nUser;
    STRING szTitle, szMsg, szQuestion, svName, svCompany, szFile;
    STRING svMPVersion, svValue;    
	BOOL bCustom;
begin						   
  
	SHELL_OBJECT_FOLDER = @PRODUCT_NAME;	   
    
	nSetupType = TYPICAL;	
    
    // Check that MediaPortal is installed, also check version
    CheckMPVersion();
    
Dlg_SdWelcome:
    szTitle = "";
    szMsg   = @WELCOME;
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_SdWelcome;
	
	szTitle   = "";
	svName    = "";
    svCompany = "";
   
Dlg_SdFeatureTree: 
    szTitle    = "";
    szMsg      = "";
    if (nSetupType = TYPICAL) then
		nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
		if (nResult = BACK) goto Dlg_SdWelcome;  
    endif;
     
Dlg_SelectTVSeries:
	nResult = ShowSelectTVSeries(FALSE);
	if (nResult = BACK) goto Dlg_SdFeatureTree;  

Dlg_SelectMovingPictures:
	nResult = ShowSelectMovingPics(FALSE);
	if (nResult = BACK) goto Dlg_SelectTVSeries;  

Dlg_SelectOptions:
	nResult = ShowSelectOptions(FALSE);
	if (nResult = BACK) goto Dlg_SelectMovingPictures;  
	
Dlg_SdStartCopy:
    szTitle = "";
    szMsg   = "";      
    nResult = SdStartCopy2( szTitle, szMsg );			    
	
	if (nResult = BACK) then
    	goto Dlg_SelectOptions;
    else
    	// Confirm Plugin versions are up to date if chosen not to install them    	   
	    szQuestion = "";
	    nResult = CheckPluginVersions(szQuestion);
 		if nResult < 0  then
 			if (AskYesNo ( szQuestion, YES ) = YES) goto Dlg_SdFeatureTree; 	
 		endif;
    endif;
    
    /*if g_bMajorUpgrade then
    	// Remove old Editor backups (these are no longer compatible)
	    if GetMediaPortalConfigDir(svValue) != -1 then;
	    	DeleteFile(svValue^"skin"^SKIN_NAME^"Basichome.xml.backup.*");
	    endif;
    endif;*/
    
    // setup default status
    Enable(STATUSEX);
    
    // Cleanup Virutal Store
    CleanVirtualStoreDir();
 
    return 0;
end;
//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// The OnMaintUIBefore event is called by the framework when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
	NUMBER nResult, nType;
	STRING szTitle, szMsg, svDir, svResult, szCaption;
begin				
	
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
		// In standard mode show maintenance dialog
		Disable(BACKBUTTON);
		nType = SdWelcomeMaint(szTitle, szMsg, MODIFY);
		Enable(BACKBUTTON);
	else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;
	
	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

	nResult = NEXT;

Dlg_SdFeatureTree:
	if (nType = MODIFY) then
		szTitle = "";
		szMsg = "";		
		nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
		if (nResult = BACK) goto Dlg_Start;
	endif;


Dlg_SelectTVSeries:
	if (nType = MODIFY) then
		nResult = ShowSelectTVSeries(FALSE);
		if (nResult = BACK) goto Dlg_SdFeatureTree;  
	endif;
	
Dlg_SelectMovingPictures:
	if (nType = MODIFY) then
		nResult = ShowSelectMovingPics(FALSE);
		if (nResult = BACK) goto Dlg_SelectTVSeries; 
	endif;

Dlg_SelectOptions:
	if (nType = MODIFY) then
		nResult = ShowSelectOptions(FALSE);
		if (nResult = BACK) goto Dlg_SelectMovingPictures; 
	endif;
		
	switch(nType)
		case REMOVEALL: 
			FeatureRemoveAll();
			GetCachedInstallDir();
		case REPAIR:    FeatureReinstall();
		case MODIFY:	UpdateSettings();
	endswitch;
    
	// setup default status 
	SetStatusWindow(0, "");
	Enable(STATUSEX); 	
	StatusUpdate(ON, 100);
	
	if (nType = MODIFY) then			
	    // Cleanup Virutal Store
	    CleanVirtualStoreDir();
	endif;
	
end;
//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// The OnFirstUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2, szCmdLine, szSite;
    NUMBER bOpt1, bOpt2;
begin
	
 	// Update Settings
	UpdateSettings();
	
	// Clean Cache Folder
    CleanCache();
        
    // Major Upgrade Cleanup
    if g_bMajorUpgrade then
    	MajorUpgradeCleanup();
    endif;
    
	Disable(STATUSEX);

	bOpt1  = TRUE;
	bOpt2  = FALSE;
	szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);
	szOption1 = "&Launch Home Page in default Browser";
	if Is(FILE_EXISTS,STREAMEDMP_EDITOR_FILE) && g_bStartBasicHome then
		szOption2 = "Launch &Streamed MP Basic Home Editor";
	endif;
	SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);	
	
	// If reboot not needed and option selected
	if (!BATCH_INSTALL && bOpt1) then
		// Launch webpage
		szSite = STREAMEDMP_HOMEPAGE_URL;
		LaunchBrowser(szSite);
	endif;
	if (!BATCH_INSTALL && bOpt2) then
		LaunchApp(STREAMEDMP_EDITOR_FILE, szCmdLine);
	endif;
	        
	
end;
//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
	STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
	NUMBER bOpt1, bOpt2;
begin     

    // Clean Cache Folder
    CleanCache();
    
    if ( REMOVEALLMODE ) then
    	UninstallCleanup();
    endif;
    
	Disable(STATUSEX);

	bOpt1   = FALSE;
	bOpt2   = FALSE;
    	
    // Uninstall.
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);
end; 

function VOID CleanCache()
	STRING svValue;	
begin
     
    // Get Cache Folder
    if GetMediaPortalConfigDir(svValue) < 0 then;
    	return;
    endif;
    svValue = CommonAppDataFolder^"Team MediaPortal\\MediaPortal";
    
    // Delete Skin Cache Folder
    SetStatusWindow(100, "Removing " + SKIN_NAME + " from MediaPortal cache.");
    Delay(1);
    svValue = svValue ^ "Cache" ^ SKIN_NAME;
    DeleteDir(svValue,ALLCONTENTS);
    
end;      

function NUMBER GetMediaPortalProgramDir(svValue)	
	NUMBER nvSize,nvType;
begin

   	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// Get MediaPortal Install Directory from Uninstall path in registry
	// This should exist if MediaPortal is correctly installed
	if (RegDBGetKeyValueEx(MEDIAPORTALUNINSTALL_REG_KEY,"InstallPath",nvType,svValue,nvSize) < 0) then
        // Fallback to this directory incase its a development build
		if (RegDBGetKeyValueEx(MEDIAPORTAL_REG_KEY,"ApplicationDir",nvType,svValue,nvSize) < 0) then
			return -1;	
		endif;
		
	endif;
		
	return 0;
end;

function NUMBER GetMediaPortalConfigDir(svValue)
	NUMBER nvSize,nvType;
begin
    
    // TODO: Read MediaPortalDirs.xml to get all Portal directories
    
   	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
		
	if (RegDBGetKeyValueEx(MEDIAPORTAL_REG_KEY,"ConfigDir",nvType,svValue,nvSize) < 0) then
		return -1;	
	endif;
	
	return 0;
end; 

function number ShowSelectTVSeries(bModify)
	STRING szDialogName, szErrorMsg;
	NUMBER nCmdValue;
	BOOL bDone, bValidate; 
	LIST listSeriesLayout;
begin

	szDialogName = "SelectionTVSeries";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_TVSERIESSELECT);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display TVSeries selection dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:	        	     			     			     			
 				// Read from Global Variables
 				if g_bTVSeriesDefault then
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE1,BUTTON_CHECKED);
 				else
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE2,BUTTON_CHECKED);
 				endif;
 			
 				// Populate series layout list                               
	        	listSeriesLayout = ListCreate(STRINGLIST);
	        	
	        	ListAddString(listSeriesLayout,"List Posters",AFTER);	        	
	        	ListAddString(listSeriesLayout,"List Banners",AFTER);
	        	ListAddString(listSeriesLayout,"Wide Banners",AFTER);
	        	ListAddString(listSeriesLayout,"Filmstrip",AFTER);
	        	// Add Series Layouts to list
	        	CtrlSetList(szDialogName,RES_COMBO_SERIESLAYOUT,listSeriesLayout);
	        	CtrlSetCurSel(szDialogName,RES_COMBO_SERIESLAYOUT,g_sSeriesLayout); 				
	        	ListDestroy(listSeriesLayout); 
	        	
 			
 			case RES_BUTTON_TVSERIESADVANCED:
 				ShowTVSeriesAdvanced(bModify);
 				         		      
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	Do (EXIT);
	        	
	        case RES_PBUT_CLOSE:
	        	Do (EXIT);
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables
	if (CtrlGetState(szDialogName,RES_RADIO_CHOICE1) = BUTTON_CHECKED) then
		g_bTVSeriesDefault = TRUE;
	else
		g_bTVSeriesDefault = FALSE;
	endif;
	
	CtrlGetCurSel(szDialogName,RES_COMBO_SERIESLAYOUT,g_sSeriesLayout); 
		
	bValidate = TRUE;
	if (nCmdValue = RES_PBUT_NEXT) then
		if (!g_bTVSeriesDefault && (g_sSeriesLayout = "List Banners")) then 
			// This Layout is not supported by Fanart Orientated style currently
			bValidate = FALSE;
			szErrorMsg = "List Banners Layout is currently not supported by the Fanart Orientated style. Please try another layout.";
		endif;		
	endif;
	
	if !bValidate then 
	 	MessageBox(szErrorMsg,INFORMATION);	 	
		goto Dlg_Wait;
	endif;
	
	if (!g_bTVSeriesDefault && g_bShowIconsInListView && g_bShowUnWatchedOnlyInListImage) then
		// Fanart Style does not yet support Single List Image for Series/Season views
		MessageBox("Fanart Style only supports Mult-Icon images in Series/Season lists, setup has changed accordingly.",INFORMATION);
		g_bShowUnWatchedOnlyInListImage = FALSE;
	endif;				
	
	// Set Features
	if (g_bTVSeriesDefault) then
		FeatureSelectItem ( MEDIA, SPUCK_FEATURE_TVSERIES, TRUE );
		FeatureSelectItem ( MEDIA, MATT_FEATURE_TVSERIES, FALSE );
	else
		FeatureSelectItem ( MEDIA, SPUCK_FEATURE_TVSERIES, FALSE );
		FeatureSelectItem ( MEDIA, MATT_FEATURE_TVSERIES, TRUE );
	endif;	
		
	if (g_bShowIconsInListView) then
		
		if (g_bShowUnWatchedOnlyInListImage) then
			FeatureSelectItem ( MEDIA, TVSERIES_SINGLEIMAGE_OPTION, TRUE );
			FeatureSelectItem ( MEDIA, TVSERIES_MULTIIMAGE_OPTION, FALSE );
		else
			FeatureSelectItem ( MEDIA, TVSERIES_SINGLEIMAGE_OPTION, FALSE );
			FeatureSelectItem ( MEDIA, TVSERIES_MULTIIMAGE_OPTION, TRUE );
		endif;
	else
		FeatureSelectItem ( MEDIA, TVSERIES_MULTIIMAGE_OPTION, FALSE );
		FeatureSelectItem ( MEDIA, TVSERIES_SINGLEIMAGE_OPTION, FALSE );				
	endif;

    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;

function number ShowTVSeriesAdvanced(bModify)
	STRING szDialogName, szErrorMsg, svText;
	NUMBER nCmdValue;
	BOOL bDone, bValidate;
	LIST listImageStyle;
begin

	szDialogName = "SelectionTVSeriesAdvanced";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_TVSERIESADVANCED);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display TVSeries Advanced dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:	        	     			     			     			
 				// Read from Global Variables
 				if g_bShowTotalEpisodeCount then
 					CtrlSetState(szDialogName,RES_CHECK_TOTALEPCOUNT,BUTTON_CHECKED); 			
 				endif;
 				if g_bShowIconsInListView then
 					CtrlSetState(szDialogName,RES_CHECK_LISTIMAGES,BUTTON_CHECKED); 			
 				endif;
 				if g_bShowArtworkIcons then
 					CtrlSetState(szDialogName,RES_CHECK_ARTWORKICONS,BUTTON_CHECKED); 			
 				endif; 			 				
 				
 				listImageStyle = ListCreate(STRINGLIST);
	        	ListAddString(listImageStyle,"Multi-Icon",AFTER);	        	
	        	ListAddString(listImageStyle,"UnWatched Icon",AFTER);
	        	// Add Support Icon Styles	        		        		        	
	        	CtrlSetList(szDialogName,RES_COMBO_LISTIMAGESSTYLE,listImageStyle);  
	        	if g_bShowUnWatchedOnlyInListImage then
	        		CtrlSetCurSel(szDialogName,RES_COMBO_LISTIMAGESSTYLE,"UnWatched Icon");
	        	else
	        		CtrlSetCurSel(szDialogName,RES_COMBO_LISTIMAGESSTYLE,"Multi-Icon");
	        	endif;
	        	ListDestroy(listImageStyle);
	        	
	        	if !g_bShowIconsInListView then
	        		// Disable Control
	        		EnableControl(szDialogName,RES_COMBO_LISTIMAGESSTYLE,FALSE);
	        	endif;
	        	 				 				         		     
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	bDone = TRUE;
	        	
	        case RES_PBUT_CLOSE:
	        	bDone = TRUE;
	        
	        case RES_CHECK_LISTIMAGES:
	        	if CtrlGetState(szDialogName,RES_CHECK_LISTIMAGES) = BUTTON_CHECKED then
	        		// Enable Control
	        		EnableControl(szDialogName,RES_COMBO_LISTIMAGESSTYLE,TRUE);
	        	else
	        		EnableControl(szDialogName,RES_COMBO_LISTIMAGESSTYLE,FALSE);
	        	endif;
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables	
	if (nCmdValue = RES_PBUT_NEXT) then
		
		if CtrlGetState(szDialogName,RES_CHECK_TOTALEPCOUNT) = BUTTON_CHECKED then
			g_bShowTotalEpisodeCount = TRUE;
		else
			g_bShowTotalEpisodeCount = FALSE;
		endif;       
		if CtrlGetState(szDialogName,RES_CHECK_LISTIMAGES) = BUTTON_CHECKED then
			g_bShowIconsInListView = TRUE;
		else
			g_bShowIconsInListView = FALSE;
		endif;
		if CtrlGetState(szDialogName,RES_CHECK_ARTWORKICONS) = BUTTON_CHECKED then
			g_bShowArtworkIcons = TRUE;
		else
			g_bShowArtworkIcons = FALSE;
		endif;					
		CtrlGetCurSel(szDialogName,RES_COMBO_LISTIMAGESSTYLE,svText);
		if svText = "UnWatched Icon" then
			g_bShowUnWatchedOnlyInListImage = TRUE;
		else
			g_bShowUnWatchedOnlyInListImage = FALSE;
		endif;
			
	endif;
	
    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;

function number ShowSelectMovingPics(bModify)
	STRING szDialogName;
	NUMBER nCmdValue;
	BOOL bDone;
begin

	szDialogName = "SelectionMovingPictures";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_MOVINGPICSSELECT);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display Moving Pictures selection dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:	        	     			     			     			
 				// Read from Global Variables
 				if g_bMovingPicturesDefault then
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE1,BUTTON_CHECKED);
 				else
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE2,BUTTON_CHECKED);
 				endif;
 				         		      
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	Do (EXIT);
	        	
	        case RES_PBUT_CLOSE:
	        	Do (EXIT);
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables
	if (CtrlGetState(szDialogName,RES_RADIO_CHOICE1) = BUTTON_CHECKED) then
		g_bMovingPicturesDefault = TRUE;
	else
		g_bMovingPicturesDefault = FALSE;
	endif;
	
	// Set Features
	if (g_bMovingPicturesDefault) then
		FeatureSelectItem ( MEDIA, SPUCK_FEATURE_MOVINGPICS, TRUE );
		FeatureSelectItem ( MEDIA, MATT_FEATURE_MOVINGPICS, FALSE );
	else
		FeatureSelectItem ( MEDIA, SPUCK_FEATURE_MOVINGPICS, FALSE );
		FeatureSelectItem ( MEDIA, MATT_FEATURE_MOVINGPICS, TRUE );
	endif;		
		
    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;

function number ShowSelectOptions(bModify)
	STRING szDialogName;
	NUMBER nCmdValue;
	BOOL bDone;
	LIST listFonts;
begin

	szDialogName = "SelectionOptions";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_OPTIONS);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display Options dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:
	        	// Populate font size list                               
	        	listFonts = ListCreate(STRINGLIST);
	        	
	        	ListAddString(listFonts,"Default",AFTER);
	        	ListAddString(listFonts,"Large",AFTER);
	        	// Add Font sizes to list
	        	CtrlSetList(szDialogName,RES_COMBO_FONTS,listFonts);
	        	        	     			     			     			
 				// Read from Global Variables
 				if g_sTVGuideSize = "8" then
 					CtrlSetState(szDialogName,RES_RADIO_TVGUIDE08ROWS,BUTTON_CHECKED);
 				else
 					CtrlSetState(szDialogName,RES_RADIO_TVGUIDE12ROWS,BUTTON_CHECKED);
 				endif;
 				 				
 				CtrlSetCurSel(szDialogName,RES_COMBO_FONTS,g_sFontSize); 				
 				ListDestroy(listFonts);
 				
 				if g_bSetAsDefaultSkin then
 					CtrlSetState(szDialogName,RES_CHECK_SKINDEFAULT,BUTTON_CHECKED);
 				endif;
 				
 				if g_bStartBasicHome then
 					CtrlSetState(szDialogName,RES_CHECK_USEBASICHOME,BUTTON_CHECKED);
 				endif;
 				 				         		      
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	Do (EXIT);
	        	
	        case RES_PBUT_CLOSE:
	        	Do (EXIT);
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables
	if (CtrlGetState(szDialogName,RES_RADIO_TVGUIDE08ROWS) = BUTTON_CHECKED) then
		g_sTVGuideSize = "8";
	else
		g_sTVGuideSize = "12";
	endif;                   
	
	CtrlGetCurSel(szDialogName,RES_COMBO_FONTS,g_sFontSize);	
	
	if (CtrlGetState(szDialogName,RES_CHECK_SKINDEFAULT) = BUTTON_CHECKED) then
		g_bSetAsDefaultSkin = TRUE;
	else
		g_bSetAsDefaultSkin = FALSE;
	endif;  
	
	if (CtrlGetState(szDialogName,RES_CHECK_USEBASICHOME) = BUTTON_CHECKED) then
		g_bStartBasicHome = TRUE;
	else
		g_bStartBasicHome = FALSE;
	endif;  	
		
	// Set Features
	if (g_sTVGuideSize = "8") then
		FeatureSelectItem ( MEDIA, TVGUIDE08_FEATURE_OPTIONS, TRUE );
		FeatureSelectItem ( MEDIA, TVGUIDE12_FEATURE_OPTIONS, FALSE );
	else
		FeatureSelectItem ( MEDIA, TVGUIDE08_FEATURE_OPTIONS, FALSE );
		FeatureSelectItem ( MEDIA, TVGUIDE12_FEATURE_OPTIONS, TRUE );
	endif;
	
	if (g_sFontSize = "Default") then
		FeatureSelectItem ( MEDIA, FONTSDEF_FEATURE_OPTIONS, TRUE );
		FeatureSelectItem ( MEDIA, FONTSLGE_FEATURE_OPTIONS, FALSE );
	else
		FeatureSelectItem ( MEDIA, FONTSDEF_FEATURE_OPTIONS, FALSE );
		FeatureSelectItem ( MEDIA, FONTSLGE_FEATURE_OPTIONS, TRUE );
	endif;
		
		
    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;


function VOID UpdateSettings()
	STRING svString;		
begin
	// Save configuration to registry
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	NumToStr(svString,g_bTVSeriesDefault);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTTVSERIES",REGDB_NUMBER,svString, -1);
	NumToStr(svString,g_bMovingPicturesDefault);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTMOVINGPICS",REGDB_NUMBER,svString, -1);
	
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"TVGUIDESIZE",REGDB_NUMBER,g_sTVGuideSize, -1);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"FONTSIZE",REGDB_STRING,g_sFontSize, -1);	
	
	// Update Graphics Quality for SeriesPosters, Default style does not require as much details
	// as it uses a much smaller Filmstrip and also contains a 100% Image on item selected       
	if g_bTVSeriesDefault then
		SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/graphicsquality/seriesposters", "20");
	else
		SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/graphicsquality/seriesposters", "35");
	endif;
	
	svString = g_sSeriesLayout;	               
	switch (svString)
		case "List Banners":
			svString = "ListBanners";
		case "List Posters":
			svString = "ListPosters";
		case "Wide Banners":
			svString = "WideBanners";
		case "Filmstrip":
			svString = "Filmstrip";		
	endswitch;
		
	TVSeriesLayout(svString,TRUE);
	
	// Set Total Episode Count Field to Series/Season List View
	if g_bShowTotalEpisodeCount then
		if !g_bShowUnWatchedOnlyInListImage then
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item3", "SeriesTotalEpisodes_1");
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/season/item3", "SeasonTotalEpisodes_1");
		else
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item3", "SeriesTotalEpisodes_2");
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/season/item3", "SeasonTotalEpisodes_2");
		endif;
	else
		// Display nothing for Season List
		if !g_bShowUnWatchedOnlyInListImage then
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item3", "SMALLSPACE");
		else
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item3", "SeriesAirsDay_2");
		endif;
		SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/season/item3", "SMALLSPACE");
	endif;
	
	// Set Watched/Unwatched counts to Series/Season List View
	if g_bShowIconsInListView then
		if !g_bShowUnWatchedOnlyInListImage then
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item1", "SeriesWatchedAndUnWatched");
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/season/item1", "SeasonWatchedAndUnWatched");
		else
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item1", "SeriesUnWatched");
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/season/item1", "SeasonUnWatched");
		endif;
	else		
		if !g_bShowUnWatchedOnlyInListImage then
			// Display the Series Air Day and nothing for Season List
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item1", "SeriesAirsDay_1");
		else
			SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/series/item1", "SMALLSPACE");
		endif;
		SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/season/item1", "SMALLSPACE");
	endif;
	
	if !g_bShowUnWatchedOnlyInListImage then
		SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/episode/item3", "SMALLSPACE");	
	else		
		SetXMLProperty(STREAMEDMP_SKIN_TVSERIESSETTINGS, "/settings/views/episode/item3", "LARGESPACE");
	endif; 
		
	NumToStr(svString,g_bShowArtworkIcons);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"ICONSINARTWORK",REGDB_NUMBER,svString, -1);
	// Update Skin to add/remove TVSeries Icons from artwork
	TVSeriesIcons(g_bShowArtworkIcons);
	
	NumToStr(svString, g_bShowUnWatchedOnlyInListImage);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"WATCHEDIMAGESTYLE",REGDB_NUMBER,svString, -1); 
	// Update Skin to change TVSeries textlist control for Image Style chosen
	if g_bTVSeriesDefault then
		TVSeriesImageStyle(g_bShowUnWatchedOnlyInListImage);
	endif;
	
	// Set Default Skin
	if g_bSetAsDefaultSkin then
		SetMPXMLProperty("skin","name",SKIN_NAME);
	else
		SetMPXMLProperty("skin","name",DEFAULT_SKIN);		
	endif;             
	
	// Enable Animations & Transistions, this is required for skin 
	// Dont need to worry about 1st time installs of mediaportal with XML
	// as this is setting is enabled by default for MediaPortal
	SetMPXMLProperty("general","animations","yes");
	
	// Start with Basic Home or Standard Home
	if g_bStartBasicHome then
		SetMPXMLProperty("general","startbasichome","yes");
	else
		SetMPXMLProperty("general","startbasichome","no");
	endif;
	
end;             

function NUMBER	GetFileVersion(svVersionNumber,sType)
	STRING svValue,szFileName;	
begin
	
	GetMediaPortalProgramDir(svValue);
	
	switch (sType) 

        case "MEDIAPORTAL": 
            szFileName = svValue^"MediaPortal.exe";; 

        case "TVSERIES": 
            szFileName = svValue^"plugins\\windows\\MP-TVSeries.dll"; 

        case "MOVINGPICTURES": 
            szFileName = svValue^"plugins\\windows\\MovingPictures.dll";      

    endswitch; 

    return VerGetFileVersion(szFileName,svVersionNumber);
    
end;

function VOID CheckMPVersion()
	STRING svVersion2, svVersion1;  
	NUMBER nResult;
begin
    
    // Warn user of old version of MediaPortal
    if (GetFileVersion(svVersion2,"MEDIAPORTAL") < 0) then    	
    	MessageBox(@MPNOTFOUND,SEVERE);
    	abort;                 	    	
    endif;
    
    // 2 (Version1 = Version2)
    // 1 (Version1 < Version2)
    // 0 (Version1 > Version2)
    
    // Check Minimum requirements are met
    svVersion1 = MEDIAPORTAL_MIN_VERSION;
    if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
    	MessageBox(@MPMINREQNOTMET,SEVERE);
    	abort; 
    endif;
    
    // Check if warning should be prompted
    svVersion1 = MEDIAPORTAL_MINNOWARN_VERSION;
    if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
    	MessageBox(@MPOLDVERSION,WARNING);
    endif;
    
end;

function NUMBER CheckPluginVersions(szQuestion)
	STRING svVersion1, svVersion2;
	STRING szMsg;
	NUMBER nReturn;
begin
    
    nReturn = 0;
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\TVSeries")) then
		// Check that compatible version of plugin is used
		GetFileVersion(svVersion2,"TVSERIES");
		svVersion1 = TVSERIES_MIN_VERSION;
    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
    		szQuestion = "Your current version of TV-Series plugin v" + svVersion2 + 
    					" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
    					svVersion1;
    		nReturn=nReturn-1;
    		
    	endif;
    endif;
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\MovingPictures")) then
		// Check that compatible version of plugin is used
		GetFileVersion(svVersion2,"MOVINGPICTURES");
		svVersion1 = MOVINGPICTURES_MIN_VERSION;
    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
	    	if nReturn < 0 then
	    		szQuestion = szQuestion + "\n\n";
	    	endif;
	    	szQuestion = szQuestion + "Your current version of Moving Pictures plugin v" + svVersion2 + 
	    				" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
	    				svVersion1;
	        nReturn = nReturn - 1;
    	endif;
    endif;
    
    if nReturn < 0 then
    	szQuestion = szQuestion + "\n\nDo you wish to go back to the select features dialog?";
    endif;
    
    return nReturn;
end;

function NUMBER LaunchBrowser(szSite)
	STRING szKey, szDir;
	STRING svValue, svReturnString1, svReturnString2;
	NUMBER nvType, nvSize;
begin
    RegDBSetDefaultRoot(HKEY_CLASSES_ROOT); 
    
	// Find the value in the registry under "HKey_Classes_Root\.htm" file,
	// to see where the browser address is kept.
	RegDBGetKeyValueEx(".htm", "", nvType, svValue, nvSize);
	
	// Append the return value to Shell\open\command
	// to get the path to executable of the browser
	szKey = svValue+"\\shell\\open\\command";
	RegDBGetKeyValueEx(szKey, "", nvType, svValue, nvSize);
	
	// Because the value in the command usually has %1 or other placeholders,
	// we parse the path to get the directory first and then the file name
	// (this way all the characters after the file name including the placeholder are removed)
	ParsePath(svReturnString1, svValue, PATH);
	ParsePath(svReturnString2, svValue, FILENAME_ONLY);
	
	// Now append the .exe extension to the file name.
	// If the browser is IE, the path contains an extra quote("").
	// By removing the placeholder, we also removed the ending close quote("),
	// but it still has the beginning opening quote ("),
	// so you have to put and ending quote (" to make if a correct path.
	// Netscape does not have the extra "" in the path.
	szDir=svReturnString1^svReturnString2+".exe";
	if ( svReturnString2 = "iexplore" ) then
		szDir=svReturnString1^svReturnString2+".exe\"";
	endif;
	
	// Now the path to the browser is available.
	// You can launch the browser and pass your .htm file as a parameter to it.
	if LaunchAppAndWait(szDir, szSite, NOWAIT) < 0 then
		return -1;
	else
		return 0;
	endif;
	
end;

function VOID MajorUpgradeCleanup()
	STRING szUninstallKey, svSubStr, svValue;
	NUMBER nvSize, nvType;
begin 
	// For some reason InstallShield doesnt cleanup files/settings properly
	// after upgrade, this function removes them manually

    // Check if old Uninstall Entry exists
   	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
   	
   	szUninstallKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\InstallShield_"+g_sMajorUpgradeGUID;
   	if (RegDBKeyExist(szUninstallKey) < 0) then
   		// Nothing to remove
   		return;
   	endif;
   	
   	// Get Path 
	RegDBGetKeyValueEx(szUninstallKey,"LogFile",nvType,svValue,nvSize);
	// Remove filename 'Setup.ilg' to path
	StrSub ( svSubStr, svValue, 0, (StrLength(svValue) - 9) );	
	
	// Remove leftover files/folder from previous install
	DeleteDir(svSubStr,ALLCONTENTS);
	
	RegDBGetKeyValueEx(szUninstallKey,"InstallSource",nvType,svValue,nvSize);
	DeleteDir(svValue,ALLCONTENTS);

    // Remove Uninstall entry in Add/Remove programs
    RegDBDeleteKey(szUninstallKey);
                       
end;

function VOID GetCachedInstallDir()
	STRING	szUninstallKey;
	NUMBER 	nvSize, nvType;
begin                           
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    szUninstallKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\InstallShield_"+PRODUCT_GUID;
    RegDBGetKeyValueEx(szUninstallKey,"InstallSource",nvType,g_sDownloadInstallDir,nvSize);	
end; 

function VOID UninstallCleanup()
	STRING szDir;
begin 
	// Remove cached downloaded install files                                           
	if (Is(PATH_EXISTS,g_sDownloadInstallDir)) then
    	DeleteDir(g_sDownloadInstallDir,ALLCONTENTS);    	
    endif;
    
    // Remove any rouge XML files from skin directory
    szDir = INSTALLDIR^"skin"^SKIN_NAME;
    DeleteFile(szDir^"*.xml");
    DeleteDir(szDir,ONLYDIR); 
    
    // Cleanup Virtual Store
    CleanVirtualStoreDir();
    
    // Finially set default skin back to Blue3wide    
    SetMPXMLProperty("skin","name",DEFAULT_SKIN);
    
    
end; 

function NUMBER SetMPXMLProperty(sSectionAttribute,sEntryAttribute, sValue)
	STRING sFile, sNode, svString;
	OBJECT oXMLdoc, oNodeListRoot, oNodeListElements;
	INT i, j;
begin
   	
   	sFile = MEDIAPORTAL_CONFIG_FILE;        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);
		
		sNode = "/profile/section";	    
	    set oNodeListRoot = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Traverse all section elements in xml until 
	    // we reach the the required configuration section    
	    for i=0 to oNodeListRoot.length - 1
		
			if oNodeListRoot(i).Attributes(0).Text = sSectionAttribute then                
                // retrieve the list of configurable elements for the section
            	set oNodeListElements = oNodeListRoot(i).childNodes;
            
            	for j = 0 to oNodeListElements.length - 1
                    
                    // we are only interested in the 'entry' elements
	                if oNodeListElements(j).baseName = "entry" then
	                    
	                    if oNodeListElements(j).Attributes(0).Text = sEntryAttribute then
	                		// set the MediaPortal property
	                        oNodeListElements(j).Text = sValue;	                       
	                    endif;
                
                	endif;	                               
                	
            	endfor;	       
            	
	        endif;
		
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (sFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;
	    set oNodeListRoot = NOTHING;
	    set oNodeListElements = NOTHING;	    	    
	    
	catch                  
		
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;

function NUMBER GetMPXMLProperty(sSectionAttribute, sEntryAttribute, sValue)
	STRING sFile, sNode, svString;
	OBJECT oXMLdoc, oNodeListRoot, oNodeListElements;
	INT i, j;
begin
   	
   	sFile = MEDIAPORTAL_CONFIG_FILE;        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);
		
		sNode = "/profile/section";	    
	    set oNodeListRoot = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Traverse all section elements in xml until 
	    // we reach the the required configuration section    
	    for i=0 to oNodeListRoot.length - 1
		
			if oNodeListRoot(i).Attributes(0).Text = sSectionAttribute then                
                // retrieve the list of configurable elements for the section
            	set oNodeListElements = oNodeListRoot(i).childNodes;
            
            	for j = 0 to oNodeListElements.length - 1
                    
                    // we are only interested in the 'entry' elements
	                if oNodeListElements(j).baseName = "entry" then
	                    
	                    if oNodeListElements(j).Attributes(0).Text = sEntryAttribute then
	                		// Get the MediaPortal property
	                        sValue = oNodeListElements(j).Text;	                       
	                    endif;
                
                	endif;	                               
                	
            	endfor;	       
            	
	        endif;
		
		endfor;   		    
	    	    
	    // release objects used
	    set oXMLdoc = NOTHING;
	    set oNodeListRoot = NOTHING;
	    set oNodeListElements = NOTHING;	    	    
	    
	catch                  
		
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;

function NUMBER TVSeriesLayout(g_sSeriesLayout,bSet)
	OBJECT oXMLdoc, oNode; 
	STRING sNode, sFile;
begin
    
    sFile = STREAMEDMP_SKIN_TVSERIESSETTINGS;        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);
		
		sNode = "/settings/views/series";	    
	    set oNode = oXMLdoc.DocumentElement.SelectSingleNode(sNode); 	    	    
		
		if bSet then				       		    	  
		
			oNode.Attributes.getNamedItem("layout").Text = g_sSeriesLayout;
		    // save the xml	    
		    oXMLdoc.Save (sFile);		   
		
		else
			g_sSeriesLayout = oNode.Attributes.getNamedItem("layout").Text;			
		endif;
	 		 	
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNode = NOTHING;  	    
	    
	catch                  
		
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;        

function NUMBER GetXMLProperty(sFile, sNode, sPropertyValue)
	OBJECT oXMLdoc, oNode; 
begin
		
	try		
		// Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
	    set oNode = oXMLdoc.DocumentElement.SelectSingleNode(sNode);
	    
	    // return property
	    sPropertyValue = oNode.Text;
					 	
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNode = NOTHING;  	    
	    
	catch                  
		
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;

function NUMBER SetXMLProperty(sFile, sNode, sPropertyValue)
	OBJECT oXMLdoc, oNode; 
begin
		
	try		
		// Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
	    set oNode = oXMLdoc.DocumentElement.SelectSingleNode(sNode);
	    
	    // Set property
	    oNode.Text = sPropertyValue;
		
		// Save XML
		oXMLdoc.Save (sFile);		
		
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNode = NOTHING;  	    
	    
	catch                  
		
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;
       
function VOID CleanVirtualStoreDir()
	STRING szValue, szVirtualStore;
	NUMBER nResult;
begin    
    // Remove Vista's Virtual Store directory for the StreamedMP Skin
    // We do this just incase a user with UAC enabled manually updated settings!    
    Disable(LOGGING);
    
 	try   
		nResult = SHFolder.SHGetFolderPathA(NULL, CSIDL_PROFILE, NULL, 0, szValue);
	    if nResult = 0 then
	    	szVirtualStore = szValue ^ "AppData\\Local\\VirtualStore\\Program Files\\Team MediaPortal\\MediaPortal\\Skin\\StreamedMP";
	    	if Is(PATH_EXISTS,szVirtualStore) then
	    		DeleteDir(szVirtualStore,ALLCONTENTS);
	    	endif;   
	    	szVirtualStore = szValue ^ "AppData\\Local\\VirtualStore\\Program Files (x86)\\Team MediaPortal\\MediaPortal\\Skin\\StreamedMP";
	    	if Is(PATH_EXISTS,szVirtualStore) then
	    		DeleteDir(szVirtualStore,ALLCONTENTS);
	    	endif;
	    	szVirtualStore = szValue ^ "AppData\\Local\\VirtualStore\\ProgramData\\Team MediaPortal\\MediaPortal\\Cache\\StreamedMP";
	    	if Is(PATH_EXISTS,szVirtualStore) then
	    		DeleteDir(szVirtualStore,ALLCONTENTS);
	    	endif;
	    endif;	    
	catch
		return;
	endcatch;	
	
	Enable(LOGGING);
	
end;

function VOID TVSeriesIcons(bAdd)
	OBJECT oXMLdoc, oNodeList;
	STRING sNode, sFile, szString, szFindStr, szReplaceStr;
	INT i;
begin   

	sFile = STREAMEDMP_SKIN_TVSERIES;        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
		
	    sNode = "/window/define";	    
	    set oNodeList = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Examine all <defines> and set texture
	    for i=0 to oNodeList.length - 1
		 	
		 	szString = oNodeList.Item(i).Text;
		 	
		 	szFindStr = "#overlaywubg:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "overlaywubg.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#tvseries_Watched:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_Watched.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#tvseries_UnWatched:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_UnWatched.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  
		    
		   	szFindStr = "#tvseries_WatchedNA:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_WatchedNA.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#tvseries_UnWatchedNA:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_UnWatchedNA.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  		    		   
		    
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (sFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNodeList = NOTHING;	    	    
	    
	catch                  
		
	    return;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return;
		
end;


function VOID TVSeriesImageStyle(bShowUnWatchedOnly)
	OBJECT oXMLdoc, oNodeList;
	STRING sNode, sFile, szString, szFindStr, szReplaceStr;
	INT i;
begin   

	sFile = STREAMEDMP_SKIN_TVSERIES;        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
		
	    sNode = "/window/define";	    
	    set oNodeList = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Examine all <defines> and set texture
	    for i=0 to oNodeList.length - 1
		 	
		 	szString = oNodeList.Item(i).Text;
		 	
		 	szFindStr = "#posX:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "730";
				else
					szReplaceStr = szFindStr + "760";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#IconXOff:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "384";
				else
					szReplaceStr = szFindStr + "389";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#IconYOff:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "11";
				else
					szReplaceStr = szFindStr + "12";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  
		    
		   	szFindStr = "#textXOff:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "-65";
				else
					szReplaceStr = szFindStr + "-75";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#textXOff2:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "548";
				else
					szReplaceStr = szFindStr + "380";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif; 
		    
		    szFindStr = "#textXOff3:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "407";
				else
					szReplaceStr = szFindStr + "415";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  		    		   
		    
		    szFindStr = "#textureFocus:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "listbg_detail2_fo.png";
				else
					szReplaceStr = szFindStr + "listbg_detail_fo.png";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  		    		   
		    
		    /*szFindStr = "#font:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "mediastream11c";
				else
					szReplaceStr = szFindStr + "mediastream12c";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;*/
		    
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (sFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNodeList = NOTHING;	    	    
	    
	catch                  
		
	    return;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return;
		
end;

function VOID EnableControl(szDialogName, nControl, bState)
	HWND hwndDlg;	
begin
	hwndDlg = CmdGetHwndDlg( szDialogName );
	EnableWindow( GetDlgItem( hwndDlg, nControl), bState);	
end;



