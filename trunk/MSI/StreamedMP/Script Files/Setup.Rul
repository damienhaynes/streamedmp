//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  StreamedMP setup main script file
//
//  Comments:     
//
//===========================================================================    

/////////////////////////////////////////////////////////////////////////////
//   INSTALLATION    	 MAINTENANCE           PATCH          RESUME/UPGRADE
//       |                   |                   |                   |
//       '-------------------'---------,---------'-------------------'
//                                     |
//                                 OnBegin()
//                                     |
//       ,-------------------,---------'---------,-------------------,
//       |                   |                   |                   |
// OnFirstUIBefore()  OnMaintUIBefore()  OnPatchUIBefore()  OnResumeUIBefore()
//       |                   |                   |                   |
//      ...                 ...                 ...                 ...
//       |                   |                   |                   |
//  OnFirstUIAfter()  OnMaintUIAfter()    OnPatchUIAfter()   OnResumeUIAfter()
//       |                   |                   |                   |
//       '-------------------'---------,---------'-------------------'
//                                     |
//                                   OnEnd()
//
/////////////////////////////////////////////////////////////////////////////


// Included header files ----------------------------------------------------
#include "ifx.h"

#define SKIN_NAME						"StreamedMP"
#define DEFAULT_SKIN					"Blue3wide" 

#define MEDIAPORTAL_REG_KEY  			"SOFTWARE\\Team MediaPortal\\MediaPortal"
#define MEDIAPORTALUNINSTALL_REG_KEY    "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\MediaPortal"
#define STREAMEDMP_REG_KEY  			"SOFTWARE\\StreamedMP"

#define STREAMEDMP_HOMEPAGE_URL			"http://code.google.com/p/streamedmp/" 

// Feature Defines
#define FANART_FEATURE_TVSERIES						"Main\\fanartTVSeries"
#define FANART_FEATURE_TVSERIES_WIDEBANNERS			"Main\\fanartTVSeriesWideBanners"
#define FANART_FEATURE_TVSERIES_5x2_WIDEBANNERS		"Main\\fanartTVSeries5x2WideBanners"
#define FANART_FEATURE_TVSERIES_5x3_WIDEBANNERS		"Main\\fanartTVSeries5x3WideBanners"
#define FANART_FEATURE_TVSERIES_7x3_WIDEBANNERS		"Main\\fanartTVSeries7x3WideBanners"
#define FANART_FEATURE_TVSERIES_10x4_WIDEBANNERS	"Main\\fanartTVSeries10x4WideBanners"
#define FANART_FEATURE_MOVINGPICS					"Main\\fanartMovingPictures"

#define DEFAULT_FEATURE_TVSERIES					"Main\\defaultTVSeries"
#define DEFAULT_FEATURE_TVSERIES_WIDEBANNERS		"Main\\defaultTVSeriesWideBanners"
#define DEFAULT_FEATURE_TVSERIES_5x2_WIDEBANNERS	"Main\\defaultTVSeries5x2WideBanners"
#define DEFAULT_FEATURE_TVSERIES_5x3_WIDEBANNERS	"Main\\defaultTVSeries5x3WideBanners"
#define DEFAULT_FEATURE_TVSERIES_7x3_WIDEBANNERS	"Main\\defaultTVSeries7x3WideBanners"
#define DEFAULT_FEATURE_TVSERIES_10x4_WIDEBANNERS	"Main\\defaultTVSeries10x4WideBanners"
#define DEFAULT_FEATURE_MOVINGPICS					"Main\\defaultMovingPictures"

#define TVGUIDE08_FEATURE_OPTIONS					"Main\\tvguide08Options"
#define TVGUIDE10_FEATURE_OPTIONS					"Main\\tvguide10Options"
#define TVGUIDE12_FEATURE_OPTIONS					"Main\\tvguide12Options"  

#define TVMINIGUIDE03_FEATURE_OPTIONS				"Main\\tvminiguide03Options"
#define TVMINIGUIDE05_FEATURE_OPTIONS				"Main\\tvminiguide05Options"
#define TVMINIGUIDE07_FEATURE_OPTIONS				"Main\\tvminiguide07Options"
#define TVMINIGUIDE09_FEATURE_OPTIONS				"Main\\tvminiguide09Options"

#define FONTSDEF_FEATURE_OPTIONS					"Main\\fontsDefOptions"
#define FONTSLGE_FEATURE_OPTIONS					"Main\\fontsLgeOptions"

#define TVSERIES_MULTIIMAGE_OPTION					"Main\\tvseriesMultiImageIcons"
#define TVSERIES_SINGLEIMAGE_OPTION					"Main\\tvseriesSingleImageIcons"

#define HIDDENMENU_IMAGE_OPTION						"Main\\hiddenMenuImage"

#define NOWPLAYING_DEFAULT							"Main\\nowPlayingDefault"
#define NOWPLAYING_FULLSCREEN_HIDDENMENU            "Main\\nowPlayingFullscreenHiddenMenu"
#define NOWPLAYING_FULLSCREEN_SLIDINGMENU           "Main\\nowPlayingFullscreenSlidingMenu"
#define NOWPLAYING_EDGE_FADE                        "Main\\nowPlayingEdgeFade"
#define NOWPLAYING_EDGE_NOFADE                      "Main\\nowPlayingEdgeNoFade"
#define NOWPLAYING_EDGE_NOMASK                      "Main\\nowPlayingEdgeNoMask"
#define NOWPLAYING_WINDOW_FADE                      "Main\\nowPlayingWindowFade"
#define NOWPLAYING_WINDOW_NOFADE                    "Main\\nowPlayingWindowNoFade"
#define NOWPLAYING_WINDOW_NOMASK                    "Main\\nowPlayingWindowNoMask"

// Program executable defines
#define STREAMEDMP_EDITOR_FILE						INSTALLDIR^SKIN_NAME^"streamedmpeditor.exe"
#define STREAMEDMP_SKIN_TVSERIES					INSTALLDIR^SKIN_NAME^"TVSeries.xml"
#define STREAMEDMP_SKIN_MOVINGPICTURES				INSTALLDIR^SKIN_NAME^"MovingPictures.xml"
#define STREAMEDMP_SKIN_TVSERIESSETTINGS			INSTALLDIR^SKIN_NAME^"TVSeries.SkinSettings.xml"                  
#define STREAMEDMP_SKIN_REFERENCES					INSTALLDIR^SKIN_NAME^"references.xml"       
#define STREAMEDMP_SKIN_COMMOVERLAYHOME				INSTALLDIR^SKIN_NAME^"common.overlay.home.xml"
#define STREAMEDMP_SKIN_COMMOVERLAY					INSTALLDIR^SKIN_NAME^"common.overlays.xml"
#define STREAMEDMP_SKIN_COMMOVERLAY2				INSTALLDIR^SKIN_NAME^"common.overlays2.xml"
#define STREAMEDMP_SKIN_BASICHOMEOVERLAY			INSTALLDIR^SKIN_NAME^"common.overlay.basichome.xml"
#define STREAMEDMP_SKIN_BASICHOMEOVERLAY2			INSTALLDIR^SKIN_NAME^"common.overlay.basichome2.xml"
#define STREAMEDMP_SKIN_MOVPICSOVERLAY				INSTALLDIR^SKIN_NAME^"movingpictures.overlay.xml"
#define STREAMEDMP_SKIN_EMULATORS					INSTALLDIR^SKIN_NAME^"myEmulators.xml" 
#define STREAMEDMP_SKIN_MUSICNOWPLAYING             INSTALLDIR^SKIN_NAME^"MyMusicPlayingNow.xml"
#define STREAMEDMP_SKIN_MUSICNOWPLAYINGANVU			INSTALLDIR^SKIN_NAME^"MyMusicPlayingNowAnVU.xml"
#define STREAMEDMP_SKIN_MUSICNOWPLAYINGLEDVU        INSTALLDIR^SKIN_NAME^"MyMusicPlayingNowLedVU.xml"

#define STREAMEDMP_SKIN_4TRACTIVE			        INSTALLDIR^SKIN_NAME^"4TR_Active.xml"
#define STREAMEDMP_SKIN_4TRPROGRAMINFO		        INSTALLDIR^SKIN_NAME^"4TR_ProgramInfo.xml"
#define STREAMEDMP_SKIN_4TRRADIOGUIDESEARCH	        INSTALLDIR^SKIN_NAME^"4TR_RadioGuideSearch.xml"
#define STREAMEDMP_SKIN_4TRRECORDEDRADIO	        INSTALLDIR^SKIN_NAME^"4TR_RecordedRadio.xml"
#define STREAMEDMP_SKIN_4TRRECORDEDTV		        INSTALLDIR^SKIN_NAME^"4TR_RecordedTv.xml"
#define STREAMEDMP_SKIN_4TRTVGUIDESEARCH		    INSTALLDIR^SKIN_NAME^"4TR_TvGuideSearch.xml"
#define STREAMEDMP_SKIN_4TRUPCOMING			        INSTALLDIR^SKIN_NAME^"4TR_Upcoming.xml"

#define STREAMEDMP_SKIN_MYTVPROGRAM			        INSTALLDIR^SKIN_NAME^"mytvprogram.xml"
#define STREAMEDMP_SKIN_MYTVRECORDEDINFO	        INSTALLDIR^SKIN_NAME^"mytvRecordedInfo.xml"
#define STREAMEDMP_SKIN_MYTVRECORDEDTV		        INSTALLDIR^SKIN_NAME^"mytvrecordedtv.xml"
#define STREAMEDMP_SKIN_MYTVSCEDULERSERVER	        INSTALLDIR^SKIN_NAME^"mytvschedulerServer.xml"
#define STREAMEDMP_SKIN_MYTVSCEDULERSERVERSEARCH	INSTALLDIR^SKIN_NAME^"mytvschedulerserverSearch.xml"
#define STREAMEDMP_SKIN_MYTVSEARCH					INSTALLDIR^SKIN_NAME^"mytvsearch.xml" 
#define STREAMEDMP_SKIN_VIDEOOSD					INSTALLDIR^SKIN_NAME^"videoOSD.xml"

// Version Defines
#define MEDIAPORTAL_MINNOWARN_VERSION		"1.0.4.25080" 	// 1.1.0 RC1 [20th Feb 2010]
#define MEDIAPORTAL_MIN_VERSION				"1.0.0.0"	

#define TVSERIES_MIN_VERSION				"2.5.3.1008"
#define MOVINGPICTURES_MIN_VERSION			"1.0.2.1048"
#define FANARTHANDLER_MIN_VERSION			"1.5.3713.40365"
#define MYLYRICS_MIN_VERSION				"1.42.0.0"
#define GLOBALSEARCH_MIN_VERSION			"1.7.0.0"
#define INFOSERVICE_MIN_VERSION				"1.5.0.59"
#define TRAILERS_MIN_VERSION				"2.0.5.44"

#define VIDEO_OSD_UPDATE					25113 // svn revision in which mediainfo for VideoOSD was updated.

// XML Path Defines
#define REFERENCES_LISTALPHA_PATH				"/controls/control[type='listcontrol']/unfocusedAlpha"
#define REFERENCES_PLAYLISTALPHA_PATH			"/controls/control[type='playlistcontrol']/unfocusedAlpha"
#define REFERENCES_THUMBALPHA_PATH				"/controls/control[type='thumbnailpanel']/unfocusedAlpha"

#define REFERENCES_LISTCOLORTEXT_PATH			"/controls/control[type='listcontrol']/textcolor"
#define REFERENCES_LISTCOLORTEXT2_PATH			"/controls/control[type='listcontrol']/textcolor2"
#define REFERENCES_LISTCOLORTEXT3_PATH			"/controls/control[type='listcontrol']/textcolor3"
#define REFERENCES_LISTCOLORWATCHED_PATH		"/controls/control[type='listcontrol']/playedColor"
#define REFERENCES_LISTCOLORREMOTE_PATH			"/controls/control[type='listcontrol']/remoteColor"
#define REFERENCES_PLAYLISTCOLORTEXT_PATH		"/controls/control[type='playlistcontrol']/textcolor"
#define REFERENCES_PLAYLISTCOLORTEXT2_PATH		"/controls/control[type='playlistcontrol']/textcolor2"
#define REFERENCES_PLAYLISTCOLORTEXT3_PATH		"/controls/control[type='playlistcontrol']/textcolor3"
#define REFERENCES_PLAYLISTCOLORWATCHED_PATH	"/controls/control[type='playlistcontrol']/playedColor"
#define REFERENCES_PLAYLISTCOLORREMOTE_PATH		"/controls/control[type='playlistcontrol']/remoteColor"

#define MUSIC_ARTIST_OVERLAY					"/window/controls/control[id='7220']/texture"
#define MUSIC_ARTIST_ANIM_OVERLAY				"/window/controls/control[id='7210']/textures"

#define EMULATORS_SCREENSHOT					"/window/controls/control[id='1001']/texture"

// Dialogs
#define RES_DLG_TVSERIESSELECT						13000
#define RES_DLG_MOVINGPICSSELECT					13001
#define RES_DLG_OPTIONS								13002
#define RES_DLG_TVSERIESADVANCED					13003
#define RES_DLG_MUSICNOWPLAYING						13004

// Dialog Controls
#define RES_RADIO_CHOICE1							1400
#define RES_RADIO_CHOICE2							1401             
#define RES_COMBO_SERIESLAYOUT						1402 
#define RES_BUTTON_TVSERIESADVANCED					1404
#define RES_COMBO_WIDEBANNERLAYOUT					1406	

#define RES_CHECK_TOTALEPCOUNT						1304
#define RES_CHECK_LISTIMAGES						1305
#define RES_COMBO_LISTIMAGESSTYLE					1308
#define RES_CHECK_ARTWORKICONS						1307
  
#define RES_COMBO_FONTS								1401 
#define RES_CHECK_SKINDEFAULT						1402
#define RES_CHECK_USEBASICHOME						1405
#define RES_COMBO_TVGUIDE							1406
#define RES_CHECK_ROUNDEDCOVERS						1408 
#define RES_COMBO_TVMINIGUIDE						1410
#define RES_BUTTON_LISTCOLOURS						1412
#define RES_BUTTON_UNFOCUSEDALPHA					1413
#define RES_CHECK_SHOWHIDDENMENUIMAGE				1414   
#define RES_CHECK_ENABLERANDOMFANARTMYTV    		1416

#define RES_BMP_NOWPLAYINGDEFAULT					1400
#define RES_BMP_NOWPLAYINGFULLSCREENHIDDENMENU		1401
#define RES_BMP_NOWPLAYINGEDGEFADE					1402
#define RES_BMP_NOWPLAYINGEDGENOFADE				1403
#define RES_BMP_NOWPLAYINGEDGENOMASK				1404
#define RES_BMP_NOWPLAYINGWINDOWFADE				1405
#define RES_BMP_NOWPLAYINGWINDOWNOFADE				1406
#define RES_BMP_NOWPLAYINGWINDOWNOMASK				1407
#define RES_BMP_NOWPLAYINGFULLSCREENSLIDINGMENU		1408

#define RES_COMBO_NOWPLAYINGCHOICE					1420
    
    
// Common Dialog Controls
#define RES_PBUT_NEXT         			1   			// ID of Next button
#define RES_PBUT_CLOSE		  			2     			// ID of the (X) button
#define RES_PBUT_CANCEL       			9   			// ID of Cancel button
#define RES_PBUT_BACK        			12   			// ID of Back button

// CSIDL values
#ifndef CSIDL_PROFILE
	#define CSIDL_PROFILE          		0x0028      
#endif
         
// Prototype Functions         
prototype VOID 		CleanCache(STRING);
prototype NUMBER 	GetMediaPortalProgramDir(BYREF STRING);
prototype NUMBER 	GetMediaPortalConfigDir(BYREF STRING); 
prototype NUMBER	GetMediaPortalDirs(STRING, BYREF STRING);
prototype VOID 		SetDefaults();
prototype VOID 		UpdateSettings(); 
prototype NUMBER	GetFileVersion(BYREF STRING, STRING);
prototype VOID		CheckMPVersion();		
prototype NUMBER	CheckPluginVersions(BYREF STRING);
prototype NUMBER	LaunchBrowser(STRING);   
prototype BOOL 		IsMajorUpgrade(BYREF STRING, BYREF STRING, BYREF BOOL);
prototype VOID		MajorUpgradeCleanup();
prototype VOID		GetCachedInstallDir();  
prototype VOID		UninstallCleanup();       
//prototype NUMBER	TVSeriesLayout(BYREF STRING,BOOL);
prototype NUMBER 	SHFolder.SHGetFolderPathA(HWND,NUMBER,NUMBER,NUMBER,BYREF STRING);
prototype VOID		CleanVirtualStoreDir();
prototype NUMBER	GetXMLProperty(STRING,STRING,BYREF STRING);
prototype NUMBER	SetXMLProperty(STRING,STRING,STRING);
prototype VOID		TVSeriesIcons(BOOL);
prototype VOID		TVSeriesImageStyle(BOOL);    
prototype VOID		EnableControl(STRING, NUMBER, BOOL);
prototype NUMBER	SetMPXMLProperty(STRING,STRING,STRING);
prototype NUMBER	GetMPXMLProperty(STRING,STRING,BYREF STRING); 
prototype NUMBER	SetSkinDefine(STRING,STRING,STRING);
prototype BOOL 		GetInstalledVersion(STRING,BYREF STRING);
prototype VOID		RoundedCovers(BOOL, STRING);   
prototype VOID		SetInstallationDirectories();
prototype BOOL		AdjustForScreenSize();
prototype NUMBER	ReplaceLineInFile(STRING, STRING, STRING);
prototype VOID		ModifySkinFilesForFULLHD(BOOL);
prototype VOID		GetListFacadeColors(); 
prototype VOID 		ShowNowPlayingPreviewImage(STRING);
prototype VOID 		HideControl(STRING, NUMBER);   
prototype VOID 		ShowControl(STRING, NUMBER);    
prototype VOID		DetectWinLargeFonts();   
prototype STRING	BoolToString(BOOL); 
prototype NUMBER	GetVersionDigit(STRING, INT);
prototype NUMBER 	GetMediaPortalRevision();

prototype NUMBER 	ShowSelectTVSeries(BOOL);
prototype NUMBER 	ShowSelectMovingPics(BOOL);
prototype NUMBER 	ShowSelectOptions(BOOL);
prototype NUMBER 	ShowTVSeriesAdvanced(BOOL); 
prototype NUMBER	ShowSelectNowPlaying(BOOL);

// Global Variables
BOOL g_bTVSeriesDefault;
BOOL g_bMovingPicturesDefault;
BOOL g_bMajorUpgrade;
BOOL g_bSetAsDefaultSkin;
BOOL g_bShowTotalEpisodeCount;
BOOL g_bShowArtworkIcons;
BOOL g_bShowIconsInListView;   
BOOL g_bShowUnWatchedOnlyInListImage; 
BOOL g_bStartBasicHome; 
BOOL g_bShowRoundedCovers;
BOOL g_bShowHiddenMenuImage;      
BOOL g_bEnableRandomFanartInMyTV;                         
                               
STRING g_sMajorUpgradeGUID;
STRING g_sTVGuideSize;
STRING g_sTVMiniGuideSize;  
STRING g_sFontSize;
STRING g_sDownloadInstallDir;   
STRING g_sWideBannerLayout;
STRING g_sUnfocusedAlphaListItems;
STRING g_sUnfocusedAlphaThumbs;  
STRING g_sNowPlayingChoice;
  
STRING g_sMediaPortalProgramDir;
STRING g_sLanguageDir;
STRING g_sThumbsDir;
STRING g_sTVLogosDir;
STRING g_sCacheDir; 
STRING g_sPluginsDir;
STRING g_sConfigDir;    
STRING g_sFanartDir;    
STRING g_sDatabaseDir;

// Colour Variables
STRING g_sTextColor;
STRING g_sText2Color;
STRING g_sText3Color;
STRING g_sWatchedColor;
STRING g_sRemoteColor;               

//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes.
//---------------------------------------------------------------------------
function OnBegin()
	STRING szVersion, szUpgradeMessage;
	NUMBER nResult;
	BOOL bUpgradeSupported; 
begin
	
	DetectWinLargeFonts();
 
	// See if older version is installed
	g_bMajorUpgrade = IsMajorUpgrade(szVersion, g_sMajorUpgradeGUID, bUpgradeSupported);
	if g_bMajorUpgrade then
		// check if version supports upgrades
		if bUpgradeSupported then
			szUpgradeMessage = "Setup is about to perform a Major Upgrade from: v" + szVersion + "\nThe previous installation will " +
							   "be removed, Do you wish to continue?";
			nResult = SprintfBox( YES|NO|CANCEL,"Major Upgrade",szUpgradeMessage, INFORMATION);
			if (nResult != IDYES) then
				abort;
			endif;
		else
		 	szUpgradeMessage = "Setup cannot perform an Upgrade from: v" + szVersion + "\nPlease uninstall from the Add\\Remove programs " +
							   "and run setup again.";
			MessageBox(szUpgradeMessage,INFORMATION);
			abort;							   
		endif;
	endif; 
	                                                              
	SetDefaults();		
end;           


/// *******************************************************
/// Sets the Installation Directories used by MediaPortal
/// Reads MediaPortalDirs.xml and if fails returns defaults
///
function void SetInstallationDirectories()
	STRING svValue;	
begin
	// Set the installation directory to one currently used by MediaPortal
	if (GetMediaPortalProgramDir(g_sMediaPortalProgramDir) < 0) then
		g_sMediaPortalProgramDir = ProgramFilesFolder^"Team MediaPortal\\MediaPortal";	
	endif;	
	
	// Get any custom defined paths from MediaPortalDirs.xml	
	if GetMediaPortalDirs("Skin",svValue) < 0 then
		svValue = CommonAppDataFolder^"Team MediaPortal\\MediaPortal\\skin";
	endif;
	INSTALLDIR = svValue;
	
	if GetMediaPortalDirs("Plugins",g_sPluginsDir) < 0 then
		g_sPluginsDir = g_sMediaPortalProgramDir^"plugins";
	endif;               
	if GetMediaPortalDirs("Config",g_sConfigDir) < 0 then
		if GetMediaPortalConfigDir(g_sConfigDir) < 0 then
		    g_sConfigDir = CommonAppDataFolder^"Team MediaPortal\\MediaPortal";
		endif;		
	endif;               
	if GetMediaPortalDirs("Language",g_sLanguageDir) < 0 then
		if GetMediaPortalConfigDir(svValue) < 0 then
			svValue = CommonAppDataFolder^"Team MediaPortal\\MediaPortal";			
		endif;
		// Append Language to program data dir
		g_sLanguageDir = svValue^"language";
	endif;                                              	           	
	if GetMediaPortalDirs("Thumbs",g_sThumbsDir) < 0 then
		if GetMediaPortalConfigDir(svValue) < 0 then
	    	svValue = CommonAppDataFolder^"Team MediaPortal\\MediaPortal";
	    endif;
	    // Append thumbs to program data dir    
		g_sThumbsDir = svValue^"thumbs";
	endif;
	g_sTVLogosDir = g_sThumbsDir^"tv\\logos";    
	g_sFanartDir = g_sThumbsDir^"Skin Fanart";
	
	if GetMediaPortalDirs("Cache",g_sCacheDir) < 0 then
		if GetMediaPortalConfigDir(svValue) < 0 then;
	    	svValue = CommonAppDataFolder^"Team MediaPortal\\MediaPortal";
	    endif;
		g_sCacheDir = svValue^"Cache";
	endif;  
	
	if GetMediaPortalDirs("Database",g_sDatabaseDir) < 0 then
		if GetMediaPortalConfigDir(svValue) < 0 then;
	    	svValue = CommonAppDataFolder^"Team MediaPortal\\MediaPortal";
	    endif;
		g_sDatabaseDir = svValue^"Database";
	endif;
   	
   	// Set MSI Dirs as properties   	
   	MsiSetProperty(ISMSI_HANDLE,"MPTVLOGOSDIR",g_sTVLogosDir);
   	MsiSetProperty(ISMSI_HANDLE,"MPLANGUAGESDIR",g_sLanguageDir);
   	MsiSetProperty(ISMSI_HANDLE,"MPPLUGINSDIR",g_sPluginsDir);
   	MsiSetProperty(ISMSI_HANDLE,"MPCONFIGDIR",g_sConfigDir);
   	MsiSetProperty(ISMSI_HANDLE,"MPBINDIR",g_sMediaPortalProgramDir);
   	MsiSetProperty(ISMSI_HANDLE,"MPFANARTDIR",g_sFanartDir);
   	MsiSetProperty(ISMSI_HANDLE,"MPDATABASEDIR",g_sDatabaseDir);
   	   	
	// Set Installation Directories used by MSI	
	FeatureSetTarget(MEDIA,"<MPTVLOGOSDIR>",g_sTVLogosDir);
	FeatureSetTarget(MEDIA,"<MPLANGUAGESDIR>",g_sLanguageDir);
	FeatureSetTarget(MEDIA,"<MPPLUGINSDIR>",g_sPluginsDir);
	FeatureSetTarget(MEDIA,"<MPCONFIGDIR>",g_sConfigDir);
	FeatureSetTarget(MEDIA,"<MPBINDIR>",g_sMediaPortalProgramDir);
	FeatureSetTarget(MEDIA,"<MPFANARTDIR>",g_sFanartDir);
	FeatureSetTarget(MEDIA,"<MPDATABASEDIR>",g_sDatabaseDir);

end;

function VOID SetDefaults()
	STRING svValue, svString, sFile;
	NUMBER nvType, nvSize;
begin 
	
	// Set Installation Directories
	SetInstallationDirectories();
	 
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// Read TVSeries Default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTTVSERIES",nvType,svValue,nvSize) < 0) then
		svValue = "1";		
	endif;	 
	if svValue = "1" then
		g_bTVSeriesDefault = TRUE;			
	endif;
	
	// Read TVSeries widebanner layout
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"TVSERIESWIDEBANNERLAYOUT",nvType,g_sWideBannerLayout,nvSize) < 0) then
		g_sWideBannerLayout = "0";		
	endif;	 
	
	// Read Moving Pictures Default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTMOVINGPICS",nvType,svValue,nvSize) < 0) then
		svValue = "1";		
	endif;	
	if svValue = "1" then
		g_bMovingPicturesDefault = TRUE;			
	endif;
	
	// Read TVGuide Size default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"TVGUIDESIZE",nvType,g_sTVGuideSize,nvSize) < 0) then
		g_sTVGuideSize = "10";							
	endif;	 
	
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"TVMINIGUIDESIZE",nvType,g_sTVMiniGuideSize,nvSize) < 0) then
		g_sTVMiniGuideSize = "7";							
	endif;
	                        	                        
	// Read Font Size default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"FONTSIZE",nvType,g_sFontSize,nvSize) < 0) then
		g_sFontSize = "Default";		
	endif;   
	
	// Read Show Hidden Menu Image
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"SHOWHIDDENMENUIMAGE",nvType,svValue,nvSize) < 0) then
		svValue = "1";		
	endif;	
	if svValue = "1" then
		g_bShowHiddenMenuImage = TRUE;			
	endif; 
	
	// Enable Random Fanart in MyTV
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"ENABLERANDOMFANARTINMYTV",nvType,svValue,nvSize) < 0) then
		svValue = "0";		
	endif;	
	if svValue = "1" then
		g_bEnableRandomFanartInMyTV = TRUE;			
	endif;
	
	// Determine if 'Total Episode Count' fields are added to List View
	// Just Check Series, but set for both Series & Season
	sFile = STREAMEDMP_SKIN_TVSERIESSETTINGS;
	if (GetXMLProperty(sFile, "/settings/views/series/item3", svValue) < 0) then
		g_bShowTotalEpisodeCount = FALSE;
	else
		if svValue = "SeriesTotalEpisodes_1" || svValue = "SeriesTotalEpisodes_2" || svValue = "SeriesEpCount" then
			g_bShowTotalEpisodeCount = TRUE;	
		endif;
	endif;
	
	// Determine if 'Watched/Unwatched' Icons are added to List View
	// Just Check Series, but set for both Series & Season	
	if (GetXMLProperty(sFile, "/settings/views/series/item1", svValue) < 0) then
		g_bShowIconsInListView = TRUE;
	else
		if svValue = "SeriesWatchedAndUnWatched" || svValue = "SeriesUnWatched" || svValue = "SeriesIcons" then
			g_bShowIconsInListView = TRUE;		
		endif;
	endif;		
	
	// Read Icons in Artwork default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"ICONSINARTWORK",nvType,svValue,nvSize) < 0) then
		svValue = "1";		
	endif;	
	if svValue = "1" then
		g_bShowArtworkIcons = TRUE;			
	endif;
	
	// Read Watched/Unwatched List Image Style
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"WATCHEDIMAGESTYLE",nvType,svValue,nvSize) < 0) then
		svValue = "0";		
	endif;	
	if svValue = "1" then
		g_bShowUnWatchedOnlyInListImage = TRUE;			
	endif;
	
	// Get Start With Basic Home property
	if GetMPXMLProperty("general","startbasichome", svValue) < 0 then
		g_bStartBasicHome = TRUE;
	else
		if svValue = "yes" then
			g_bStartBasicHome = TRUE;
		endif;
	endif;	
	
	// Rounded Covers in Fanart Style (TVSeries/MovingPictures) default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"ROUNDEDCOVERS",nvType,svValue,nvSize) < 0) then
		// Default=ON
		svValue = "1";		
	endif;	
	if svValue = "1" then
		g_bShowRoundedCovers = TRUE;			
	endif;
	
	// My Music VU Meters
	//if GetMPXMLProperty("musicmisc","vumeter", g_sVUMeter) < 0 then
	//	g_sVUMeter = "led";	
	//endif;	

	// Unfocused Alpha List Layout               
	sFile = STREAMEDMP_SKIN_REFERENCES;	
	if GetXMLProperty(sFile, REFERENCES_LISTALPHA_PATH, g_sUnfocusedAlphaListItems) < 0 then
		g_sUnfocusedAlphaListItems = "100";
	endif;		
	// Unfocused Alpha Thumbs Layout
	if GetXMLProperty(sFile, REFERENCES_THUMBALPHA_PATH, g_sUnfocusedAlphaThumbs) < 0 then
		g_sUnfocusedAlphaThumbs = "100";
	endif;
	
	// Read NowPlaying Style default
	if (RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"NOWPLAYINGSTYLE",nvType,g_sNowPlayingChoice,nvSize) < 0) then
		g_sNowPlayingChoice = "Default";							
	endif;
		
	// Get List Facade Colors
	GetListFacadeColors();
	
	g_bSetAsDefaultSkin = TRUE; // Should always be default	
	
end;

function VOID GetListFacadeColors()
	STRING svValue, szString, sFile;
begin
	
	// Get ListControl Colors
	sFile = STREAMEDMP_SKIN_REFERENCES;
	if GetXMLProperty(sFile, REFERENCES_LISTCOLORTEXT_PATH, svValue) < 0 then
		svValue = "ffFFFFFF";
	endif;
	StrToUpper(szString, svValue);
	StrSub(g_sTextColor, szString, 2, 6);
	
	if GetXMLProperty(sFile, REFERENCES_LISTCOLORTEXT2_PATH, svValue) < 0 then
		svValue = "ffFFFFFF";
	endif;
	StrToUpper(szString, svValue);
	StrSub(g_sText2Color, szString, 2, 6);
	
	if GetXMLProperty(sFile, REFERENCES_LISTCOLORTEXT3_PATH, svValue) < 0 then
		svValue = "ffFFFFFF";
	endif;
	StrToUpper(szString, svValue);
	StrSub(g_sText3Color, szString, 2, 6);
	
	if GetXMLProperty(sFile, REFERENCES_LISTCOLORWATCHED_PATH, svValue) < 0 then
		svValue = "ff808080";
	endif;
	StrToUpper(szString, svValue);
	StrSub(g_sWatchedColor, szString, 2, 6);
	
	
	if GetXMLProperty(sFile, REFERENCES_LISTCOLORREMOTE_PATH, svValue) < 0 then
		svValue = "ffFFA075";
	endif;
	StrToUpper(szString, svValue);
	StrSub(g_sRemoteColor, szString, 2, 6);
	
end;

function BOOL IsMajorUpgrade(sMajorUpgradeVersion, sMajorUpgradeGUID, bUpgradeSupported)
	STRING szKey;
	NUMBER nvBufferSize, nResult;
	BOOL bUpgrade;
begin
    nvBufferSize = 256;
    bUpgrade = TRUE;
    
    // Major Upgrades requires a change to the ProductCode GUID and Version every release
    // Don't change the UpgradeCode
    
    // Get Properties for MajorUpgrade
    // Returns the GUID in svMajorUpgrade of previous install             
 	MsiGetProperty(ISMSI_HANDLE,"MAJORUPGRADE_01",sMajorUpgradeGUID,nvBufferSize);
 	if StrLength(sMajorUpgradeGUID) = 0 then
 		return FALSE;
 	endif;
 	
 	// Check if there is any versions we dont want to support upgrades on		
	if sMajorUpgradeGUID = "{7A7760CC-256A-4ECD-BE3F-E7644FAD5DA8}" then
		
		sMajorUpgradeVersion = "0.1.167";
		bUpgradeSupported = FALSE;		
		return TRUE;
	
	elseif sMajorUpgradeGUID = "{437C996D-2A3D-4809-89F7-E25A66A463B1}" then
		sMajorUpgradeVersion = "0.2.215";
		bUpgradeSupported = FALSE;		
		return TRUE;
	
	elseif sMajorUpgradeGUID = "{E8B2D59B-84CD-4817-961B-BEA89324BAB3}" then
		sMajorUpgradeVersion = "0.2.219";
		bUpgradeSupported = TRUE;		
		return TRUE;
	
	else
		// Return the previous product version if GUID matches
	 	bUpgradeSupported = GetInstalledVersion(sMajorUpgradeGUID,sMajorUpgradeVersion);
		return bUpgradeSupported;
			
	endif;   
		
 	return FALSE;
end;

function BOOL GetInstalledVersion(sGUID, sMajorUpgradeVersion)
	NUMBER nvType, nvSize;
	STRING svValue;
begin
    
    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
        
    if RegDBKeyExist(STREAMEDMP_REG_KEY) < 0 then
    	return FALSE;
    endif;
    
    if RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"PRODUCTGUID",nvType,svValue,nvSize) < 0 then
    	return FALSE;
    else
        if svValue != sGUID then
        	return FALSE;
        endif;
        
        RegDBGetKeyValueEx(STREAMEDMP_REG_KEY,"VERSION",nvType,sMajorUpgradeVersion,nvSize);
    endif;
    
    return TRUE;
end;
    
//---------------------------------------------------------------------------
// OnFirstUIBefore
//
// The OnFirstUIBefore event is called by the framework when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    NUMBER nResult, nSetupType, nvSize, nUser;
    STRING szTitle, szMsg, szQuestion, svName, svCompany, szFile;
    STRING svMPVersion, svValue;    
	BOOL bCustom;
begin						   
  
	SHELL_OBJECT_FOLDER = @PRODUCT_NAME;	   
    
	nSetupType = TYPICAL;	
    
    // Check that MediaPortal is installed, also check version
    CheckMPVersion();  
    
    // UnCheck TV-Logos, user only needs one set
    FeatureSelectItem ( MEDIA, "TVLogos", FALSE );
    
Dlg_SdWelcome:
    szTitle = "";
    szMsg   = @WELCOME;
    nResult = SdWelcome(szTitle, szMsg);
    if (nResult = BACK) goto Dlg_SdWelcome;
	
	szTitle   = "";
	svName    = "";
    svCompany = "";
   
Dlg_SdFeatureTree: 
    szTitle    = "";
    szMsg      = "";
    if (nSetupType = TYPICAL) then
		nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
		if (nResult = BACK) goto Dlg_SdWelcome;  
    endif;
     
Dlg_SelectTVSeries:
	nResult = ShowSelectTVSeries(FALSE);
	if (nResult = BACK) goto Dlg_SdFeatureTree;  

Dlg_SelectMovingPictures:
	nResult = ShowSelectMovingPics(FALSE);
	if (nResult = BACK) goto Dlg_SelectTVSeries;  

Dlg_SelectNowPlaying:
	nResult = ShowSelectNowPlaying(FALSE);
	if (nResult = BACK) goto Dlg_SelectMovingPictures;
	
Dlg_SelectOptions:
	nResult = ShowSelectOptions(FALSE);
	if (nResult = BACK) goto Dlg_SelectNowPlaying;  
	
Dlg_SdStartCopy:
    szTitle = "";
    szMsg   = "";      
    nResult = SdStartCopy2( szTitle, szMsg );			    
	
	if (nResult = BACK) then
    	goto Dlg_SelectOptions;
    else
    	// Confirm Plugin versions are up to date if chosen not to install them    	   
	    szQuestion = "";
	    nResult = CheckPluginVersions(szQuestion);
 		if nResult < 0  then
 			if (AskYesNo ( szQuestion, YES ) = YES) goto Dlg_SdFeatureTree; 	
 		endif;
    endif;
    
    /*if g_bMajorUpgrade then
    	// Remove old Editor backups (these are no longer compatible)
	    if GetMediaPortalConfigDir(svValue) != -1 then;
	    	DeleteFile(svValue^"skin"^SKIN_NAME^"Basichome.xml.backup.*");
	    endif;
    endif;*/
    
    // setup default status
    Enable(STATUSEX);
    
    // Cleanup Virutal Store
    CleanVirtualStoreDir();
 
    return 0;
end;
//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// The OnMaintUIBefore event is called by the framework when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
	NUMBER nResult, nType;
	STRING szTitle, szMsg, svDir, svResult, szCaption;
begin				
	
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
		// In standard mode show maintenance dialog
		Disable(BACKBUTTON);
		nType = SdWelcomeMaint(szTitle, szMsg, MODIFY);
		Enable(BACKBUTTON);
	else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;
	
	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

	nResult = NEXT;

Dlg_SdFeatureTree:
	if (nType = MODIFY) then
		szTitle = "";
		szMsg = "";		
		nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
		if (nResult = BACK) goto Dlg_Start;
	endif;


Dlg_SelectTVSeries:
	if (nType = MODIFY) then
		nResult = ShowSelectTVSeries(FALSE);
		if (nResult = BACK) goto Dlg_SdFeatureTree;  
	endif;
	
Dlg_SelectMovingPictures:
	if (nType = MODIFY) then
		nResult = ShowSelectMovingPics(FALSE);
		if (nResult = BACK) goto Dlg_SelectTVSeries; 
	endif;  
	
Dlg_SelectNowPlaying:
	if (nType = MODIFY) then
		nResult = ShowSelectNowPlaying(FALSE);
		if (nResult = BACK) goto Dlg_SelectMovingPictures; 
	endif;

Dlg_SelectOptions:
	if (nType = MODIFY) then
		nResult = ShowSelectOptions(FALSE);
		if (nResult = BACK) goto Dlg_SelectNowPlaying; 
	endif;
		
	switch(nType)
		case REMOVEALL: 
			FeatureRemoveAll();
			GetCachedInstallDir();
		case REPAIR:    FeatureReinstall();
		case MODIFY:	UpdateSettings();
	endswitch;
    
	// setup default status 
	SetStatusWindow(0, "");
	Enable(STATUSEX); 	
	StatusUpdate(ON, 100);
	
	if (nType = MODIFY) then			
	    // Cleanup Virutal Store
	    CleanVirtualStoreDir();
	endif;
	
end;
//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// The OnFirstUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2, szCmdLine, szSite;
    NUMBER bOpt1, bOpt2;
begin
	
 	// Update Settings
	UpdateSettings();
	
	// Clean Cache Folder    
    CleanCache("Blue3");
    CleanCache("Blue3wide");
	CleanCache(SKIN_NAME);
	        
    // Major Upgrade Cleanup
    if g_bMajorUpgrade then
    	MajorUpgradeCleanup();
    endif;
    
	Disable(STATUSEX);

	bOpt1  = FALSE;
	bOpt2  = TRUE;
	szMsg1 = SdLoadString(IFX_SDFINISH_MSG1);
	szOption1 = "&Launch Home Page in default Browser";
	if Is(FILE_EXISTS,STREAMEDMP_EDITOR_FILE) && g_bStartBasicHome then
		szOption2 = "Launch &Streamed MP Basic Home Editor";
	endif;
	SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);	
	
	// If reboot not needed and option selected
	if (!BATCH_INSTALL && bOpt1) then
		// Launch webpage
		szSite = STREAMEDMP_HOMEPAGE_URL;
		LaunchBrowser(szSite);
	endif;
	if (!BATCH_INSTALL && bOpt2) then
		LaunchApp(STREAMEDMP_EDITOR_FILE, szCmdLine);
	endif;
	        
	
end;
//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
	STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
	NUMBER bOpt1, bOpt2;
begin     

    // Clean Cache Folder    
    CleanCache("Blue3");
    CleanCache("Blue3wide");
    CleanCache(SKIN_NAME);
    
    if ( REMOVEALLMODE ) then
    	UninstallCleanup();
    endif;
    
	Disable(STATUSEX);

	bOpt1   = FALSE;
	bOpt2   = FALSE;
    	
    // Uninstall.
    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = SdLoadString(IFX_SDFINISH_REMOVE_MSG1);
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);
end; 

function VOID CleanCache(sSkin)
	STRING svValue;	
begin
    
    // Delete Skin Cache Folder
    SetStatusWindow(100, "Removing " + sSkin + " from MediaPortal cache.");
    Delay(1);
    svValue = g_sCacheDir ^ sSkin;
    DeleteDir(svValue,ALLCONTENTS);
    
end;      

function NUMBER GetMediaPortalProgramDir(svValue)	
	NUMBER nvSize,nvType;
begin

   	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// Get MediaPortal Install Directory from Uninstall path in registry
	// This should exist if MediaPortal is correctly installed
	if (RegDBGetKeyValueEx(MEDIAPORTALUNINSTALL_REG_KEY,"InstallPath",nvType,svValue,nvSize) < 0) then
        // Fallback to this directory incase its a development build
        // Note: This Key is no longer created in MediaPortal 1.1.0+
		if (RegDBGetKeyValueEx(MEDIAPORTAL_REG_KEY,"ApplicationDir",nvType,svValue,nvSize) < 0) then
			return -1;	
		endif;
		
	endif;
		
	return 0;
end;

function NUMBER GetMediaPortalConfigDir(svValue)
	NUMBER nvSize,nvType;
begin    
	// Fallback incase MediaPortalDirs.xml fails us  
	// Note: This key no longer creted in MediaPortal 1.1.0+
   	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	// Note: This Key is no longer created in MediaPortal 1.1.0+	
	if (RegDBGetKeyValueEx(MEDIAPORTAL_REG_KEY,"ConfigDir",nvType,svValue,nvSize) < 0) then
		return -1;	
	endif;
	
	return 0;
end; 

function NUMBER GetMediaPortalDirs(sType, sValue)
	OBJECT oXMLdoc, oNodeList, oDirID;
	STRING sNode, sPath, sDisk, sFileName;
	INT i;
begin                        
    
    try 
	   	set oXMLdoc = CreateObject("Microsoft.XMLDOM");
		    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    	    
	    // MediaPortalDirs.xml contains a reference to all Paths used by MediaPortal
	    // Currently this file lives in the main program files directory
	    // But we should first check the personal directory as user can override there as well	   
	    sFileName = PersonalFolder ^ "Team MediaPortal\\MediaPortalDirs.xml";
	    if !Is(FILE_EXISTS,sFileName) then
	        
	        // Check Default location
		    sFileName = g_sMediaPortalProgramDir^"MediaPortalDirs.xml";
		    if !Is(FILE_EXISTS,sFileName) then
		    	// If the file does not exist check the program data directory
		    	sFileName = CommonAppDataFolder ^ "Team MediaPortal\\MediaPortal\\MediaPortalDirs.xml";
		    endif;   
		
		endif;
		// Load the document	
		oXMLdoc.Load (sFileName);	
		
	    sNode = "/Config/Dir";	    
	    set oNodeList = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Examine all <Dir> nodes to find id
	    for i=0 to oNodeList.length - 1
		 	
		 	// The id attribute holds the path identifier e.g. Config, Plugins, Skin
		 	set oDirID = oNodeList.Item(i).Attributes.GetNamedItem("id");
		 	
		 	// Get Path Property value
		 	if oDirID.Text = sType then
		 		sPath = oNodeList.Item(i).SelectSingleNode("Path").Text;		 		
		 	endif;
		
		endfor;
		
		// Replace path variables
		StrToLower(sPath,sPath);
		StrReplace(sPath,"%programdata%\\","%programdata%",0);
		StrReplace(sPath,"%programdata%",CommonAppDataFolder,0);
		
		// Check if Path is valid, otherwise append MediaPortal root directory
		if (GetDisk(sPath, sDisk) < 0) then
		     sPath = g_sMediaPortalProgramDir^sPath;
		endif;
		
		StrAddLastSlash(sPath);
		
		// Return value
		sValue = sPath;
		    
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNodeList = NOTHING;
	    set oDirID = NOTHING;	    	    
	 	   
	catch                  
				
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    
    if !Is(VALID_PATH,sValue) then
    	return -1;
    endif;
    
    return 0;
    	 	
end;

function number ShowSelectTVSeries(bModify)
	STRING szDialogName, szErrorMsg;
	NUMBER nCmdValue;
	BOOL bDone, bValidate; 
	LIST listWideBannerLayout;
begin

	szDialogName = "SelectionTVSeries";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_TVSERIESSELECT);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display TVSeries selection dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:	        	     			     			     			
 				// Read from Global Variables
 				if g_bTVSeriesDefault then
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE1,BUTTON_CHECKED);
 				else
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE2,BUTTON_CHECKED);
 				endif;
 			
 				// Populate WideBanner layout list                               
	        	listWideBannerLayout = ListCreate(STRINGLIST);
	        	
	        	ListAddString(listWideBannerLayout,"Default",AFTER);	        	
	        	ListAddString(listWideBannerLayout,"5x2 Grid + Poster",AFTER);
	        	ListAddString(listWideBannerLayout,"5x3 Grid",AFTER);
	        	ListAddString(listWideBannerLayout,"7x3 Grid",AFTER);
	        	ListAddString(listWideBannerLayout,"10x4 Grid",AFTER);
	        		        	
	        	// Add Layouts to list
	        	CtrlSetList(szDialogName,RES_COMBO_WIDEBANNERLAYOUT,listWideBannerLayout);	        	
	        	switch (g_sWideBannerLayout)
	        		case "0":
	        			CtrlSetCurSel(szDialogName,RES_COMBO_WIDEBANNERLAYOUT,"Default");
	        		case "1":
	        			CtrlSetCurSel(szDialogName,RES_COMBO_WIDEBANNERLAYOUT,"5x2 Grid + Poster");
	        		case "2":
	        			CtrlSetCurSel(szDialogName,RES_COMBO_WIDEBANNERLAYOUT,"5x3 Grid");
	        		case "3":
	        			CtrlSetCurSel(szDialogName,RES_COMBO_WIDEBANNERLAYOUT,"7x3 Grid");
	        		case "4":
	        			CtrlSetCurSel(szDialogName,RES_COMBO_WIDEBANNERLAYOUT,"10x4 Grid");
	        	endswitch;	        	
	        	ListDestroy(listWideBannerLayout);	        	
 			
 			case RES_BUTTON_TVSERIESADVANCED:
 				ShowTVSeriesAdvanced(bModify);
 				         		      
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	Do (EXIT);
	        	
	        case RES_PBUT_CLOSE:
	        	Do (EXIT);
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables
	if (CtrlGetState(szDialogName,RES_RADIO_CHOICE1) = BUTTON_CHECKED) then
		g_bTVSeriesDefault = TRUE;
	else
		g_bTVSeriesDefault = FALSE;
	endif;
	
	CtrlGetCurSel(szDialogName, RES_COMBO_WIDEBANNERLAYOUT, g_sWideBannerLayout); 
	switch (g_sWideBannerLayout)
		case "Default":
			g_sWideBannerLayout = "0";
		case "5x2 Grid + Poster":
			g_sWideBannerLayout = "1";
		case "5x3 Grid":
			g_sWideBannerLayout = "2";
		case "7x3 Grid":
			g_sWideBannerLayout = "3";
		case "10x4 Grid":
			g_sWideBannerLayout = "4";
	endswitch;
			
	bValidate = TRUE;	
	
	if !bValidate then 
	 	MessageBox(szErrorMsg,INFORMATION);	 	
		goto Dlg_Wait;
	endif;
	
	if (!g_bTVSeriesDefault && g_bShowIconsInListView && g_bShowUnWatchedOnlyInListImage) then
		// Fanart Style does not yet support Single List Image for Series/Season views
		MessageBox("Fanart Style only supports Mult-Icon images in Series/Season lists, setup has changed accordingly.",INFORMATION);
		g_bShowUnWatchedOnlyInListImage = FALSE;
	endif;				
	
	// Set TVSeries Features
	FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES, FALSE );
	FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_5x2_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_5x3_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_7x3_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_10x4_WIDEBANNERS, FALSE );
	
	FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES, FALSE );
	FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_5x2_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_5x3_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_7x3_WIDEBANNERS, FALSE );
	FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_10x4_WIDEBANNERS, FALSE );
	
	if (g_bTVSeriesDefault) then		
		// only enable the corresonding default layout		
		switch (g_sWideBannerLayout)
			case "0":
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_WIDEBANNERS, TRUE );
			case "1":                                                    
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES, TRUE ); 
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_5x2_WIDEBANNERS, TRUE );
			case "2":                                                          
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_5x3_WIDEBANNERS, TRUE );
			case "3":                                                          
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_7x3_WIDEBANNERS, TRUE );
			case "4":                                                          
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_TVSERIES_10x4_WIDEBANNERS, TRUE );
		endswitch;
				
	else		
		// only enable the corresonding fanart layout
		switch (g_sWideBannerLayout)
			case "0":
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_WIDEBANNERS, TRUE );
			case "1":
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_5x2_WIDEBANNERS, TRUE );
			case "2":                                                          
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_5x3_WIDEBANNERS, TRUE );
			case "3":                                                          
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_7x3_WIDEBANNERS, TRUE );
			case "4":                                                          
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES, TRUE );
				FeatureSelectItem ( MEDIA, FANART_FEATURE_TVSERIES_10x4_WIDEBANNERS, TRUE );
		endswitch;   
		
	endif;	
		
	if (g_bShowIconsInListView) then
		
		if (g_bShowUnWatchedOnlyInListImage) then
			FeatureSelectItem ( MEDIA, TVSERIES_SINGLEIMAGE_OPTION, TRUE );
			FeatureSelectItem ( MEDIA, TVSERIES_MULTIIMAGE_OPTION, FALSE );
		else
			FeatureSelectItem ( MEDIA, TVSERIES_SINGLEIMAGE_OPTION, FALSE );
			FeatureSelectItem ( MEDIA, TVSERIES_MULTIIMAGE_OPTION, TRUE );
		endif;
	else
		FeatureSelectItem ( MEDIA, TVSERIES_MULTIIMAGE_OPTION, FALSE );
		FeatureSelectItem ( MEDIA, TVSERIES_SINGLEIMAGE_OPTION, FALSE );				
	endif;

    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;

function number ShowTVSeriesAdvanced(bModify)
	STRING szDialogName, szErrorMsg, svText;
	NUMBER nCmdValue;
	BOOL bDone, bValidate;
	LIST listImageStyle;
begin

	szDialogName = "SelectionTVSeriesAdvanced";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_TVSERIESADVANCED);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display TVSeries Advanced dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:	        	     			     			     			
 				// Read from Global Variables
 				if g_bShowTotalEpisodeCount then
 					CtrlSetState(szDialogName,RES_CHECK_TOTALEPCOUNT,BUTTON_CHECKED); 			
 				endif;
 				if g_bShowIconsInListView then
 					CtrlSetState(szDialogName,RES_CHECK_LISTIMAGES,BUTTON_CHECKED); 			
 				endif;
 				if g_bShowArtworkIcons then
 					CtrlSetState(szDialogName,RES_CHECK_ARTWORKICONS,BUTTON_CHECKED); 			
 				endif; 			 				
 				
 				listImageStyle = ListCreate(STRINGLIST);
	        	ListAddString(listImageStyle,"Multi-Icon",AFTER);	        	
	        	ListAddString(listImageStyle,"UnWatched Icon",AFTER);
	        	// Add Support Icon Styles	        		        		        	
	        	CtrlSetList(szDialogName,RES_COMBO_LISTIMAGESSTYLE,listImageStyle);  
	        	if g_bShowUnWatchedOnlyInListImage then
	        		CtrlSetCurSel(szDialogName,RES_COMBO_LISTIMAGESSTYLE,"UnWatched Icon");
	        	else
	        		CtrlSetCurSel(szDialogName,RES_COMBO_LISTIMAGESSTYLE,"Multi-Icon");
	        	endif;
	        	ListDestroy(listImageStyle);
	        	
	        	if !g_bShowIconsInListView then
	        		// Disable Control
	        		EnableControl(szDialogName,RES_COMBO_LISTIMAGESSTYLE,FALSE);
	        	endif;
	        	 				 				         		     
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	bDone = TRUE;
	        	
	        case RES_PBUT_CLOSE:
	        	bDone = TRUE;
	        
	        case RES_CHECK_LISTIMAGES:
	        	if CtrlGetState(szDialogName,RES_CHECK_LISTIMAGES) = BUTTON_CHECKED then
	        		// Enable Control
	        		EnableControl(szDialogName,RES_COMBO_LISTIMAGESSTYLE,TRUE);
	        	else
	        		EnableControl(szDialogName,RES_COMBO_LISTIMAGESSTYLE,FALSE);
	        	endif;
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables	
	if (nCmdValue = RES_PBUT_NEXT) then
		
		if CtrlGetState(szDialogName,RES_CHECK_TOTALEPCOUNT) = BUTTON_CHECKED then
			g_bShowTotalEpisodeCount = TRUE;
		else
			g_bShowTotalEpisodeCount = FALSE;
		endif;       
		if CtrlGetState(szDialogName,RES_CHECK_LISTIMAGES) = BUTTON_CHECKED then
			g_bShowIconsInListView = TRUE;
		else
			g_bShowIconsInListView = FALSE;
		endif;
		if CtrlGetState(szDialogName,RES_CHECK_ARTWORKICONS) = BUTTON_CHECKED then
			g_bShowArtworkIcons = TRUE;
		else
			g_bShowArtworkIcons = FALSE;
		endif;					
		CtrlGetCurSel(szDialogName,RES_COMBO_LISTIMAGESSTYLE,svText);
		if svText = "UnWatched Icon" then
			g_bShowUnWatchedOnlyInListImage = TRUE;
		else
			g_bShowUnWatchedOnlyInListImage = FALSE;
		endif;
			
	endif;
	
    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;

function number ShowSelectMovingPics(bModify)
	STRING szDialogName;
	NUMBER nCmdValue;
	BOOL bDone;
begin

	szDialogName = "SelectionMovingPictures";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_MOVINGPICSSELECT);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display Moving Pictures selection dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:	        	     			     			     			
 				// Read from Global Variables
 				if g_bMovingPicturesDefault then
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE1,BUTTON_CHECKED);
 				else
 					CtrlSetState(szDialogName,RES_RADIO_CHOICE2,BUTTON_CHECKED);
 				endif;
 				         		      
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	Do (EXIT);
	        	
	        case RES_PBUT_CLOSE:
	        	Do (EXIT);
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables
	if (CtrlGetState(szDialogName,RES_RADIO_CHOICE1) = BUTTON_CHECKED) then
		g_bMovingPicturesDefault = TRUE;
	else
		g_bMovingPicturesDefault = FALSE;
	endif;
	
	// Set Features
	if (g_bMovingPicturesDefault) then
		FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_MOVINGPICS, TRUE );
		FeatureSelectItem ( MEDIA, FANART_FEATURE_MOVINGPICS, FALSE );
	else
		FeatureSelectItem ( MEDIA, DEFAULT_FEATURE_MOVINGPICS, FALSE );
		FeatureSelectItem ( MEDIA, FANART_FEATURE_MOVINGPICS, TRUE );
	endif;		
		
    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;

function number ShowSelectOptions(bModify)
	STRING szDialogName, sValue;
	NUMBER nCmdValue;
	BOOL bDone, bResult;
	LIST listFonts, listTVGuides, listVUMeters, listTVMiniGuides;
	OBJECT objColors, objUnfocusedAlpha;
begin

	szDialogName = "SelectionOptions";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_OPTIONS);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display Options dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:
	        	// Populate font size list                               
	        	listFonts = ListCreate(STRINGLIST);
	        	
	        	ListAddString(listFonts,"Default",AFTER);
	        	ListAddString(listFonts,"Large",AFTER);
	        
	        	// Add Font sizes to list
	        	CtrlSetList(szDialogName,RES_COMBO_FONTS,listFonts);
	      		
	      		// Select Last/Default Font size                                      
				CtrlSetCurSel(szDialogName,RES_COMBO_FONTS,g_sFontSize); 				
 				ListDestroy(listFonts);
	      		                                      
	      		// Populate TVGuide size list
	      		listTVGuides = ListCreate(STRINGLIST);	      			    	
	        	        	     			     			     			 				
 				ListAddString(listTVGuides,"8 Rows",AFTER);
	        	ListAddString(listTVGuides,"10 Rows",AFTER);
	        	ListAddString(listTVGuides,"12 Rows",AFTER);	    	    		
	        	
	        	// Add TVGuide sizes to list
	        	CtrlSetList(szDialogName,RES_COMBO_TVGUIDE,listTVGuides);
	    
 				// Select Last/Default TVGuide size
 				switch (g_sTVGuideSize)
 					case "8":
	    				CtrlSetCurSel(szDialogName,RES_COMBO_TVGUIDE,"8 Rows");
	    			case "10":
	    				CtrlSetCurSel(szDialogName,RES_COMBO_TVGUIDE,"10 Rows");
	    			default:
	    				CtrlSetCurSel(szDialogName,RES_COMBO_TVGUIDE,"12 Rows");
	   			endswitch; 		
				ListDestroy(listTVGuides);					    			 				
 				
 				// Populate TVMiniGuide size list
	      		listTVMiniGuides = ListCreate(STRINGLIST);	      			    	
	        	        	     			     			     			 				
 				ListAddString(listTVMiniGuides,"3 Rows",AFTER);
	        	ListAddString(listTVMiniGuides,"5 Rows",AFTER);
	        	ListAddString(listTVMiniGuides,"7 Rows",AFTER);	    	    		
	        	ListAddString(listTVMiniGuides,"9 Rows",AFTER);
	        	
	        	// Add TVGuide sizes to list
	        	CtrlSetList(szDialogName,RES_COMBO_TVMINIGUIDE,listTVMiniGuides);
	    
 				// Select Last/Default TVGuide size
 				switch (g_sTVMiniGuideSize)
 					case "3":
	    				CtrlSetCurSel(szDialogName,RES_COMBO_TVMINIGUIDE,"3 Rows");
	    			case "5":
	    				CtrlSetCurSel(szDialogName,RES_COMBO_TVMINIGUIDE,"5 Rows");
	    			case "9":
	    				CtrlSetCurSel(szDialogName,RES_COMBO_TVMINIGUIDE,"9 Rows");
	    			default:
	    				CtrlSetCurSel(szDialogName,RES_COMBO_TVMINIGUIDE,"7 Rows");
	   			endswitch; 		
				ListDestroy(listTVMiniGuides);
 				
 				// Select Now Playing Music VU Meters
 				//listVUMeters = ListCreate(STRINGLIST);
				
				//ListAddString(listVUMeters,"Analog",AFTER);
				//ListAddString(listVUMeters,"Digital",AFTER);
				//ListAddString(listVUMeters,"None (Fake)",AFTER);
				// Add VUMeter types to list
	        	//CtrlSetList(szDialogName,RES_COMBO_VUMETERS,listVUMeters);
	    		
	    		// Select current VUMeter type    		      		
	    		//switch (g_sVUMeter)
 				//	case "analog":
	    		//		CtrlSetCurSel(szDialogName,RES_COMBO_VUMETERS,"Analog");
	    		//	case "led":
	    		//		CtrlSetCurSel(szDialogName,RES_COMBO_VUMETERS,"Digital");
	    		//	default:
	    		//		CtrlSetCurSel(szDialogName,RES_COMBO_VUMETERS,"None (Fake)");
	   			//endswitch; 		 				
 				//ListDestroy(listVUMeters);	        
 				 				 				 		
 				if g_bSetAsDefaultSkin then
 					CtrlSetState(szDialogName,RES_CHECK_SKINDEFAULT,BUTTON_CHECKED);
 				endif;
 				
 				if g_bStartBasicHome then
 					CtrlSetState(szDialogName,RES_CHECK_USEBASICHOME,BUTTON_CHECKED);
 				endif;  
 				
 				if g_bShowRoundedCovers then
 					CtrlSetState(szDialogName,RES_CHECK_ROUNDEDCOVERS,BUTTON_CHECKED);
 				endif;
 				
 				// Disable rounded cover checkbox if Fanart Style is not chosen
 				if (g_bTVSeriesDefault && g_bMovingPicturesDefault) then
 				      EnableControl(szDialogName,RES_CHECK_ROUNDEDCOVERS,FALSE);
 				endif; 			 		
 				       
 				if g_bShowHiddenMenuImage then
 					CtrlSetState(szDialogName,RES_CHECK_SHOWHIDDENMENUIMAGE,BUTTON_CHECKED);
 				endif;
 				  
 				if g_bEnableRandomFanartInMyTV then
 					CtrlSetState(szDialogName,RES_CHECK_ENABLERANDOMFANARTMYTV,BUTTON_CHECKED);
 				endif;
 				
 				
 			case RES_BUTTON_LISTCOLOURS:
 				// Create Instance of Colors Class
 				try
	 				set objColors = CoCreateObjectDotNet(SUPPORTDIR^"FacadeProperties.dll", "FacadeProperties.Colors" );
					
					// Update Defaults
					objColors.SetTextColor(g_sTextColor);
					objColors.SetText2Color(g_sText2Color);
					objColors.SetText3Color(g_sText3Color);
					objColors.SetWatchedColor(g_sWatchedColor);
					objColors.SetRemoteColor(g_sRemoteColor);
									
					// Display Color Choice Dialog
					bResult = objColors.ShowColors(); 
		            
		            // Save Colors
					if bResult then					
						g_sTextColor = objColors.GetTextColor();
						g_sText2Color = objColors.GetText2Color();
						g_sText3Color = objColors.GetText3Color();
						g_sWatchedColor = objColors.GetWatchedColor();
						g_sRemoteColor = objColors.GetRemoteColor();					
					endif;
	 			    
	 			    // Destroy Object
	 			    set objColors = NOTHING;
	 			 catch
	 			 	MessageBox("Error: unable to display\read colours",INFORMATION);
	 			 endcatch;
 			
 			case RES_BUTTON_UNFOCUSEDALPHA:
 				 // Create Instance of UnfocusedAlpha Class
 				try
	 				set objUnfocusedAlpha = CoCreateObjectDotNet(SUPPORTDIR^"FacadeProperties.dll", "FacadeProperties.UnfocusedAlpha" );
					
					// Update Defaults
					objUnfocusedAlpha.SetUnfocusedAlphaListItems(g_sUnfocusedAlphaListItems);
					objUnfocusedAlpha.SetUnfocusedAlphaThumbs(g_sUnfocusedAlphaThumbs);
														
					// Display Color Choice Dialog
					bResult = objUnfocusedAlpha.ShowUnfocusedAlpha(); 
		            
		            // Save Colors
					if bResult then					
                    	g_sUnfocusedAlphaListItems =  objUnfocusedAlpha.GetUnfocusedAlphaListItems;
                    	g_sUnfocusedAlphaThumbs = objUnfocusedAlpha.GetUnfocusedAlphaThumbs;
					endif;
	 			    
	 			    // Destroy Object
	 			    set objColors = NOTHING;
	 			 catch
	 			 	MessageBox("Error: unable to display\read colours",INFORMATION);
	 			 endcatch;
 			     				 				         		      
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	Do (EXIT);
	        	
	        case RES_PBUT_CLOSE:
	        	Do (EXIT);
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables
	
	CtrlGetCurSel(szDialogName,RES_COMBO_TVGUIDE,sValue);
	switch (sValue)
		case "8 Rows":
			g_sTVGuideSize = "8"; 
		case "10 Rows":
			g_sTVGuideSize = "10";
		default:
			g_sTVGuideSize = "12";
	endswitch;  
	
	CtrlGetCurSel(szDialogName,RES_COMBO_TVMINIGUIDE,sValue);
	switch (sValue)
		case "3 Rows":
			g_sTVMiniGuideSize = "3"; 
		case "5 Rows":
			g_sTVMiniGuideSize = "5";
		case "9 Rows":
			g_sTVMiniGuideSize = "9";
		default:
			g_sTVMiniGuideSize = "7";
	endswitch;

	CtrlGetCurSel(szDialogName,RES_COMBO_FONTS,g_sFontSize);	
	
	//CtrlGetCurSel(szDialogName,RES_COMBO_VUMETERS,sValue);
	//switch (sValue)
	//	case "Analog":
	//		g_sVUMeter = "analog"; 
	//	case "Digital":
	//		g_sVUMeter = "led";
	//	default:
	//		g_sVUMeter = "none";
	//endswitch;
	
	if (CtrlGetState(szDialogName,RES_CHECK_SKINDEFAULT) = BUTTON_CHECKED) then
		g_bSetAsDefaultSkin = TRUE;
	else
		g_bSetAsDefaultSkin = FALSE;
	endif;  
	
	if (CtrlGetState(szDialogName,RES_CHECK_USEBASICHOME) = BUTTON_CHECKED) then
		g_bStartBasicHome = TRUE;
	else
		g_bStartBasicHome = FALSE;
	endif;  	
	
	if (CtrlGetState(szDialogName,RES_CHECK_ROUNDEDCOVERS) = BUTTON_CHECKED) then
		g_bShowRoundedCovers = TRUE;
	else
		g_bShowRoundedCovers = FALSE;
	endif;  
	  
	if (CtrlGetState(szDialogName,RES_CHECK_ENABLERANDOMFANARTMYTV) = BUTTON_CHECKED) then
		g_bEnableRandomFanartInMyTV = TRUE;		
	else
		g_bEnableRandomFanartInMyTV = FALSE;		
	endif;  	
		
	// Set Features 
	
	// TVGuide
	FeatureSelectItem ( MEDIA, TVGUIDE08_FEATURE_OPTIONS, FALSE );
	FeatureSelectItem ( MEDIA, TVGUIDE10_FEATURE_OPTIONS, FALSE );
	FeatureSelectItem ( MEDIA, TVGUIDE12_FEATURE_OPTIONS, FALSE );
	switch (g_sTVGuideSize)
		case "8":
			FeatureSelectItem ( MEDIA, TVGUIDE08_FEATURE_OPTIONS, TRUE );			
		case "10":			;
			FeatureSelectItem ( MEDIA, TVGUIDE10_FEATURE_OPTIONS, TRUE );			
		default:			
			FeatureSelectItem ( MEDIA, TVGUIDE12_FEATURE_OPTIONS, TRUE );
	endswitch; 
	
	// TV MiniGuide	                            
	FeatureSelectItem ( MEDIA, TVMINIGUIDE03_FEATURE_OPTIONS, FALSE );
	FeatureSelectItem ( MEDIA, TVMINIGUIDE05_FEATURE_OPTIONS, FALSE );
	FeatureSelectItem ( MEDIA, TVMINIGUIDE07_FEATURE_OPTIONS, FALSE );
	FeatureSelectItem ( MEDIA, TVMINIGUIDE09_FEATURE_OPTIONS, FALSE );                            
	switch (g_sTVMiniGuideSize)
		case "3":
			FeatureSelectItem ( MEDIA, TVMINIGUIDE03_FEATURE_OPTIONS, TRUE );			
		case "5":			
			FeatureSelectItem ( MEDIA, TVMINIGUIDE05_FEATURE_OPTIONS, TRUE );			
		case "9":			
			FeatureSelectItem ( MEDIA, TVMINIGUIDE09_FEATURE_OPTIONS, TRUE );			
		default:			
			FeatureSelectItem ( MEDIA, TVMINIGUIDE07_FEATURE_OPTIONS, TRUE );
	endswitch;
	
	// Font Sizes	
	if (g_sFontSize = "Default") then
		FeatureSelectItem ( MEDIA, FONTSDEF_FEATURE_OPTIONS, TRUE );
		FeatureSelectItem ( MEDIA, FONTSLGE_FEATURE_OPTIONS, FALSE );
	else
		FeatureSelectItem ( MEDIA, FONTSDEF_FEATURE_OPTIONS, FALSE );
		FeatureSelectItem ( MEDIA, FONTSLGE_FEATURE_OPTIONS, TRUE );
	endif;			
	
	if (CtrlGetState(szDialogName,RES_CHECK_SHOWHIDDENMENUIMAGE) = BUTTON_CHECKED) then
		g_bShowHiddenMenuImage = TRUE;
		FeatureSelectItem ( MEDIA, HIDDENMENU_IMAGE_OPTION, TRUE );		
	else
		g_bShowHiddenMenuImage = FALSE;
		FeatureSelectItem ( MEDIA, HIDDENMENU_IMAGE_OPTION, FALSE );		
	endif;		

    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;


function number ShowSelectNowPlaying(bModify)
	STRING szDialogName, sValue;
	NUMBER nCmdValue;
	BOOL bDone, bResult;
	LIST listNowPlaying;	
begin

	szDialogName = "SelectionNowPlaying";
   	bDone = FALSE;
      	                         	                     
    EzDefineDialog(szDialogName,"","",RES_DLG_MUSICNOWPLAYING);

Dlg_Wait:  
    // Loop unitl done
    repeat
    	nCmdValue = WaitOnDialog(szDialogName);

	    switch (nCmdValue)
	    	
	    	case DLG_CLOSE:
	            // The user clicked the window's close button.
	            Do (EXIT);
	            
	        case DLG_ERR:
	            MessageBox ("Unable to display Now Playing dialog. Setup canceled.", SEVERE);
	            abort;
	            
	        case DLG_INIT:
	        	// Populate font size list                               
	        	listNowPlaying = ListCreate(STRINGLIST);
	        	
	        	ListAddString(listNowPlaying,"Default",AFTER);
	        	ListAddString(listNowPlaying,"Fullscreen - Standard Hidden Menu",AFTER);
	        	ListAddString(listNowPlaying,"Fullscreen - Top/Down Sliding Menu",AFTER);
	        	ListAddString(listNowPlaying,"Default - Edge Fade",AFTER);
	        	ListAddString(listNowPlaying,"Default - Edge No Fade",AFTER);
	        	ListAddString(listNowPlaying,"Default - Edge No Mask",AFTER);
	        	ListAddString(listNowPlaying,"Default - Window Fade",AFTER);
	        	ListAddString(listNowPlaying,"Default - Window No Fade",AFTER);
	        	ListAddString(listNowPlaying,"Default - Window No Mask",AFTER);
	        	
	        	// Add Now Playing styles to list
	        	CtrlSetList(szDialogName,RES_COMBO_NOWPLAYINGCHOICE,listNowPlaying);
	      		
	      		// Set current selection			  
	    		CtrlSetCurSel(szDialogName,RES_COMBO_NOWPLAYINGCHOICE,g_sNowPlayingChoice); 				
 				ListDestroy(listNowPlaying);
	       		
	       		// Show corresponding Preview image
	       		ShowNowPlayingPreviewImage(szDialogName); 				 				 			
 			     				 				         		      
			case RES_COMBO_NOWPLAYINGCHOICE:
				ShowNowPlayingPreviewImage(szDialogName);
			  			     				 				         		      
			case RES_PBUT_BACK:
				bDone = TRUE;	 	        
	   	        	   	        	   	        
	        case RES_PBUT_NEXT:
	            bDone = TRUE;	        
	        
	        case RES_PBUT_CANCEL:
	        	Do (EXIT);
	        	
	        case RES_PBUT_CLOSE:
	        	Do (EXIT);
	        	
	     endswitch;
    
    until bDone;       
		
	bDone = FALSE;
	
	// Store settings in Global Variables	
	CtrlGetCurSel(szDialogName,RES_COMBO_NOWPLAYINGCHOICE,g_sNowPlayingChoice);
    
    // Set Feature Selection
    FeatureSelectItem ( MEDIA, NOWPLAYING_DEFAULT, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_FULLSCREEN_HIDDENMENU, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_FULLSCREEN_SLIDINGMENU, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_EDGE_FADE, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_EDGE_NOFADE, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_EDGE_NOMASK, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_WINDOW_FADE, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_WINDOW_NOFADE, FALSE );
    FeatureSelectItem ( MEDIA, NOWPLAYING_WINDOW_NOMASK, FALSE );
        
    switch (g_sNowPlayingChoice)	
		case "Default":
			FeatureSelectItem ( MEDIA, NOWPLAYING_DEFAULT, TRUE );
		
		case "Fullscreen - Standard Hidden Menu":
		    FeatureSelectItem ( MEDIA, NOWPLAYING_FULLSCREEN_HIDDENMENU, TRUE );
		    
		case "Fullscreen - Top/Down Sliding Menu":
		    FeatureSelectItem ( MEDIA, NOWPLAYING_FULLSCREEN_SLIDINGMENU, TRUE );
		    
		case "Default - Edge Fade":
			FeatureSelectItem ( MEDIA, NOWPLAYING_EDGE_FADE, TRUE );  
			
		case "Default - Edge No Fade":
			FeatureSelectItem ( MEDIA, NOWPLAYING_EDGE_NOFADE, TRUE );
		
		case "Default - Edge No Mask":
			FeatureSelectItem ( MEDIA, NOWPLAYING_EDGE_NOMASK, TRUE );
		
		case "Default - Window Fade":
			FeatureSelectItem ( MEDIA, NOWPLAYING_WINDOW_FADE, TRUE );
		
		case "Default - Window No Fade":
			FeatureSelectItem ( MEDIA, NOWPLAYING_WINDOW_NOFADE, TRUE );
		
		case "Default - Window No Mask":
			FeatureSelectItem ( MEDIA, NOWPLAYING_WINDOW_NOMASK, TRUE );
						
		default:
			FeatureSelectItem ( MEDIA, NOWPLAYING_DEFAULT, TRUE );	
		
	endswitch;
    
    EndDialog (szDialogName);
    ReleaseDialog (szDialogName);
        
   	return nCmdValue;
end;

function void ShowNowPlayingPreviewImage(szDlg)
	STRING svSelection;
begin
			
	// Hide all controls
	HideControl(szDlg, RES_BMP_NOWPLAYINGDEFAULT);
	HideControl(szDlg, RES_BMP_NOWPLAYINGFULLSCREENHIDDENMENU);
	HideControl(szDlg, RES_BMP_NOWPLAYINGFULLSCREENSLIDINGMENU);
	HideControl(szDlg, RES_BMP_NOWPLAYINGEDGEFADE);
	HideControl(szDlg, RES_BMP_NOWPLAYINGEDGENOFADE);
	HideControl(szDlg, RES_BMP_NOWPLAYINGEDGENOMASK);
	HideControl(szDlg, RES_BMP_NOWPLAYINGWINDOWFADE);
	HideControl(szDlg, RES_BMP_NOWPLAYINGWINDOWNOFADE);
	HideControl(szDlg, RES_BMP_NOWPLAYINGWINDOWNOMASK);
		
	// Show Selected Preview image
	CtrlGetCurSel(szDlg, RES_COMBO_NOWPLAYINGCHOICE, svSelection);
	
	switch (svSelection)	
		case "Default":
			ShowControl(szDlg, RES_BMP_NOWPLAYINGDEFAULT);
		
		case "Fullscreen - Standard Hidden Menu":
		    ShowControl(szDlg, RES_BMP_NOWPLAYINGFULLSCREENHIDDENMENU);
		    
		case "Fullscreen - Top/Down Sliding Menu":
		    ShowControl(szDlg, RES_BMP_NOWPLAYINGFULLSCREENSLIDINGMENU);
		    
		case "Default - Edge Fade":
			ShowControl(szDlg, RES_BMP_NOWPLAYINGEDGEFADE);  
			
		case "Default - Edge No Fade":
			ShowControl(szDlg, RES_BMP_NOWPLAYINGEDGENOFADE);
		
		case "Default - Edge No Mask":
			ShowControl(szDlg, RES_BMP_NOWPLAYINGEDGENOMASK);
		
		case "Default - Window Fade":
			ShowControl(szDlg, RES_BMP_NOWPLAYINGWINDOWFADE);
		
		case "Default - Window No Fade":
			ShowControl(szDlg, RES_BMP_NOWPLAYINGWINDOWNOFADE);
		
		case "Default - Window No Mask":
			ShowControl(szDlg, RES_BMP_NOWPLAYINGWINDOWNOMASK);
						
		default:
			ShowControl(szDlg, RES_BMP_NOWPLAYINGDEFAULT);	
		
	endswitch;	
	
end;

function void HideControl(szDlg, controlID)
	HWND  	hwndDlg, hCtrl;
	NUMBER	nResult;
begin
      
    // Get Handle of Dialog
	hwndDlg = CmdGetHwndDlg( szDlg );
	
	// Get Handle of Control
	hCtrl = GetDlgItem(hwndDlg, controlID); 
	
	// Hide Control
	nResult = ShowWindow(hCtrl, SW_HIDE);
	
end;

function void ShowControl(szDlg, controlID)
	HWND  	hwndDlg, hCtrl;
	NUMBER	nResult;
begin
      
    // Get Handle of Dialog
	hwndDlg = CmdGetHwndDlg( szDlg );
	
	// Get Handle of Control
	hCtrl = GetDlgItem(hwndDlg, controlID); 
	
	// Hide Control
	nResult = ShowWindow(hCtrl, SW_SHOW);
	
end;


function VOID UpdateSettings()
	STRING svString, sFile, sArtistImage, szDefine;
	BOOL bReturn;		
begin
	// Save configuration to registry
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	NumToStr(svString,g_bTVSeriesDefault);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTTVSERIES",REGDB_NUMBER,svString, -1);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"TVSERIESWIDEBANNERLAYOUT",REGDB_NUMBER,g_sWideBannerLayout, -1);
		
	NumToStr(svString,g_bMovingPicturesDefault);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"DEFAULTMOVINGPICS",REGDB_NUMBER,svString, -1);
	
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"TVGUIDESIZE",REGDB_NUMBER,g_sTVGuideSize, -1);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"TVMINIGUIDESIZE",REGDB_NUMBER,g_sTVMiniGuideSize, -1);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"FONTSIZE",REGDB_STRING,g_sFontSize, -1);
	
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"NOWPLAYINGSTYLE",REGDB_STRING,g_sNowPlayingChoice, -1);	
	
	// Update Graphics Quality for SeriesPosters, Default style does not require as much details
	// as it uses a much smaller Filmstrip and also contains a 100% Image on item selected       
	sFile = STREAMEDMP_SKIN_TVSERIESSETTINGS;
	if g_bTVSeriesDefault then
		SetXMLProperty(sFile, "/settings/graphicsquality/seriesposters", "20");
	else
		SetXMLProperty(sFile, "/settings/graphicsquality/seriesposters", "35");
	endif;
	
	// Set Total Episode Count Field to Series/Season List View
	sFile = STREAMEDMP_SKIN_TVSERIESSETTINGS;
	if g_bShowTotalEpisodeCount then
		if !g_bShowUnWatchedOnlyInListImage then
			SetXMLProperty(sFile, "/settings/views/series/item3", "SeriesTotalEpisodes_1");
			SetXMLProperty(sFile, "/settings/views/season/item3", "SeasonTotalEpisodes_1");
		else
			SetXMLProperty(sFile, "/settings/views/series/item3", "SeriesTotalEpisodes_2");
			SetXMLProperty(sFile, "/settings/views/season/item3", "SeasonTotalEpisodes_2");
		endif;
	else
		// Display nothing for Season List
		if !g_bShowUnWatchedOnlyInListImage then
			SetXMLProperty(sFile, "/settings/views/series/item3", "SMALLSPACE");
		else
			SetXMLProperty(sFile, "/settings/views/series/item3", "SeriesAirsDay_2");
		endif;
		SetXMLProperty(sFile, "/settings/views/season/item3", "SMALLSPACE");
	endif;
	
	// Set Watched/Unwatched counts to Series/Season List View
	if g_bShowIconsInListView then
		if !g_bShowUnWatchedOnlyInListImage then
			SetXMLProperty(sFile, "/settings/views/series/item1", "SeriesWatchedAndUnWatched");
			SetXMLProperty(sFile, "/settings/views/season/item1", "SeasonWatchedAndUnWatched");
		else
			SetXMLProperty(sFile, "/settings/views/series/item1", "SeriesUnWatched");
			SetXMLProperty(sFile, "/settings/views/season/item1", "SeasonUnWatched");
		endif;
	else		
		if !g_bShowUnWatchedOnlyInListImage then
			// Display the Series Air Day and nothing for Season List
			SetXMLProperty(sFile, "/settings/views/series/item1", "SeriesAirsDay_1");
		else
			SetXMLProperty(sFile, "/settings/views/series/item1", "SMALLSPACE");
		endif;
		SetXMLProperty(sFile, "/settings/views/season/item1", "SMALLSPACE");
	endif;
	
	if !g_bShowUnWatchedOnlyInListImage then
		SetXMLProperty(sFile, "/settings/views/episode/item3", "SMALLSPACE");	
	else		
		SetXMLProperty(sFile, "/settings/views/episode/item3", "LARGESPACE");
	endif; 
		
	NumToStr(svString,g_bShowArtworkIcons);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"ICONSINARTWORK",REGDB_NUMBER,svString, -1);
	// Update Skin to add/remove TVSeries Icons from artwork
	TVSeriesIcons(g_bShowArtworkIcons);
	
	NumToStr(svString, g_bShowUnWatchedOnlyInListImage);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"WATCHEDIMAGESTYLE",REGDB_NUMBER,svString, -1); 
	// Update Skin to change TVSeries textlist control for Image Style chosen
	if g_bTVSeriesDefault then
		TVSeriesImageStyle(g_bShowUnWatchedOnlyInListImage);
	endif;
	
	// Set Default Skin
	if g_bSetAsDefaultSkin then
		SetMPXMLProperty("skin","name",SKIN_NAME);
	else
		SetMPXMLProperty("skin","name",DEFAULT_SKIN);		
	endif;             
	
	// Enable Animations & Transistions, this is required for skin 
	// Dont need to worry about 1st time installs of mediaportal with XML
	// as this is setting is enabled by default for MediaPortal
	SetMPXMLProperty("general","animations","yes");
	
	// Now Playing Music VUMeter support
	//SetMPXMLProperty("musicmisc","vumeter", g_sVUMeter);
	
	// Start with Basic Home or Standard Home
	if g_bStartBasicHome then
		SetMPXMLProperty("general","startbasichome","yes");
	else
		SetMPXMLProperty("general","startbasichome","no");
	endif;
	
	NumToStr(svString,g_bShowRoundedCovers);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"ROUNDEDCOVERS",REGDB_NUMBER,svString, -1);
	// Update Skin to show/hide rounded covers
	RoundedCovers(g_bShowRoundedCovers, "TVSeries");
	RoundedCovers(g_bShowRoundedCovers, "MovingPictures");
	
	NumToStr(svString,g_bShowHiddenMenuImage);
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"SHOWHIDDENMENUIMAGE",REGDB_NUMBER,svString, -1);
	
	// Enable/Disable Random Fanart in MyTV sections	
	NumToStr(svString,g_bEnableRandomFanartInMyTV);	
	RegDBSetKeyValueEx(STREAMEDMP_REG_KEY,"ENABLERANDOMFANARTINMYTV",REGDB_NUMBER,svString, -1);
	szDefine = "#useRandomTVSeriesFanart";
	SetSkinDefine(STREAMEDMP_SKIN_4TRACTIVE, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_4TRPROGRAMINFO, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_4TRRADIOGUIDESEARCH, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_4TRRECORDEDRADIO, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_4TRRECORDEDTV, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_4TRTVGUIDESEARCH, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_4TRUPCOMING, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_MYTVPROGRAM, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_MYTVRECORDEDINFO, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_MYTVRECORDEDTV, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_MYTVSCEDULERSERVER, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_MYTVSCEDULERSERVERSEARCH, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	SetSkinDefine(STREAMEDMP_SKIN_MYTVSEARCH, szDefine, BoolToString(g_bEnableRandomFanartInMyTV));
	
	// Update Unfocused Alpha in references.xml
	// Valid values from 0 - 255 (Tranparent - Solid);
	sFile = STREAMEDMP_SKIN_REFERENCES;
	SetXMLProperty(sFile, REFERENCES_LISTALPHA_PATH, g_sUnfocusedAlphaListItems);	
	SetXMLProperty(sFile, REFERENCES_PLAYLISTALPHA_PATH, g_sUnfocusedAlphaListItems);
	SetXMLProperty(sFile, REFERENCES_THUMBALPHA_PATH, g_sUnfocusedAlphaThumbs);
	
	// Set List Facade Colors
	SetXMLProperty(sFile, REFERENCES_LISTCOLORTEXT_PATH, "FF"+g_sTextColor);
	SetXMLProperty(sFile, REFERENCES_LISTCOLORTEXT2_PATH, "FF"+g_sText2Color);
	SetXMLProperty(sFile, REFERENCES_LISTCOLORTEXT3_PATH, "FF"+g_sText3Color);
	SetXMLProperty(sFile, REFERENCES_LISTCOLORWATCHED_PATH, "FF"+g_sWatchedColor);
	SetXMLProperty(sFile, REFERENCES_LISTCOLORREMOTE_PATH, "FF"+g_sRemoteColor);
	
	SetXMLProperty(sFile, REFERENCES_PLAYLISTCOLORTEXT_PATH, "FF"+g_sTextColor);
	SetXMLProperty(sFile, REFERENCES_PLAYLISTCOLORTEXT2_PATH, "FF"+g_sText2Color);
	SetXMLProperty(sFile, REFERENCES_PLAYLISTCOLORTEXT3_PATH, "FF"+g_sText3Color);
	SetXMLProperty(sFile, REFERENCES_PLAYLISTCOLORWATCHED_PATH, "FF"+g_sWatchedColor);
	SetXMLProperty(sFile, REFERENCES_PLAYLISTCOLORREMOTE_PATH, "FF"+g_sRemoteColor);
	
	// Update Hard Coded Paths
	sArtistImage = g_sThumbsDir^"Music\\Artists\\#Play.Current.ArtistL.jpg";
	
	sFile = STREAMEDMP_SKIN_COMMOVERLAYHOME;
	SetXMLProperty(sFile, MUSIC_ARTIST_OVERLAY, sArtistImage );
	SetXMLProperty(sFile, MUSIC_ARTIST_ANIM_OVERLAY, "#Play.Current.Thumb;"+sArtistImage);
	
	sFile = STREAMEDMP_SKIN_COMMOVERLAY;
	SetXMLProperty(sFile, MUSIC_ARTIST_OVERLAY, sArtistImage);
	SetXMLProperty(sFile, MUSIC_ARTIST_ANIM_OVERLAY, "#Play.Current.Thumb;"+sArtistImage);
	
	sFile = STREAMEDMP_SKIN_COMMOVERLAY2;
	SetXMLProperty(sFile, MUSIC_ARTIST_OVERLAY, sArtistImage);
	SetXMLProperty(sFile, MUSIC_ARTIST_ANIM_OVERLAY, "#Play.Current.Thumb;"+sArtistImage);
	
	sFile = STREAMEDMP_SKIN_BASICHOMEOVERLAY;
	SetXMLProperty(sFile, MUSIC_ARTIST_OVERLAY, sArtistImage);
	SetXMLProperty(sFile, MUSIC_ARTIST_ANIM_OVERLAY, "#Play.Current.Thumb;"+sArtistImage);   
	sFile = STREAMEDMP_SKIN_BASICHOMEOVERLAY2;
	SetXMLProperty(sFile, MUSIC_ARTIST_OVERLAY, sArtistImage);
	SetXMLProperty(sFile, MUSIC_ARTIST_ANIM_OVERLAY, "#Play.Current.Thumb;"+sArtistImage);
	
	sFile = STREAMEDMP_SKIN_MOVPICSOVERLAY;
	SetXMLProperty(sFile, MUSIC_ARTIST_OVERLAY, sArtistImage);
	SetXMLProperty(sFile, MUSIC_ARTIST_ANIM_OVERLAY, "#Play.Current.Thumb;"+sArtistImage);	
	
	sFile = STREAMEDMP_SKIN_EMULATORS;
	SetXMLProperty(sFile, EMULATORS_SCREENSHOT, g_sThumbsDir^"myEmulators\\screenshots\\#selecteditem.jpg");
	
	// Adjust Skin to support 1920x1080 resolution
	bReturn = AdjustForScreenSize();
	ModifySkinFilesForFULLHD(bReturn);	
	
	// Update VideoOSD.xml to point to correct <import> for mediainfo
	// This can be removed after RC2
	if GetMediaPortalRevision() >= VIDEO_OSD_UPDATE then
		ReplaceLineInFile(STREAMEDMP_SKIN_VIDEOOSD,"<import>videoOSD.mediainfo.xml</import>","<import>videoOSD.mediainfo2.xml</import>");
	endif;
	
end;             

function NUMBER	GetFileVersion(svVersionNumber,sType)
	STRING svValue,szFileName;	
begin
		
	switch (sType) 

        case "MEDIAPORTAL": 
            szFileName = g_sMediaPortalProgramDir^"MediaPortal.exe"; 

        case "TVSERIES": 
            szFileName = g_sPluginsDir^"windows\\MP-TVSeries.dll"; 

        case "MOVINGPICTURES": 
            szFileName = g_sPluginsDir^"windows\\MovingPictures.dll";
            
		case "LYRICS": 
            szFileName = g_sPluginsDir^"windows\\MyLyrics.dll";       
     
     	case "INFOSERVICE": 
            szFileName = g_sPluginsDir^"windows\\InfoService.dll"; 
            
        case "TRAILERS": 
            szFileName = g_sPluginsDir^"windows\\MyTrailers.dll"; 
            
        case "GLOBALSEARCH": 
            szFileName = g_sPluginsDir^"windows\\GUIGlobalSearch.dll"; 
            
        case "FANARTHANDLER": 
            szFileName = g_sPluginsDir^"process\\FanartHandler.dll";     

    endswitch; 

    return VerGetFileVersion(szFileName,svVersionNumber);
    
end;

function VOID CheckMPVersion()
	STRING svVersion2, svVersion1;  
	NUMBER nResult;
begin
    
    // Warn user of old version of MediaPortal
    if (GetFileVersion(svVersion2,"MEDIAPORTAL") < 0) then    	
    	MessageBox(@MPNOTFOUND,SEVERE);
    	abort;                 	    	
    endif;
    
    // VerCompare Return Codes:
    // Return Code = 2 (Version1 = Version2)
    // Return Code = 1 (Version1 < Version2)
    // Return Code = 0 (Version1 > Version2)
    
    // Check Minimum requirements are met
    svVersion1 = MEDIAPORTAL_MIN_VERSION;
    if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
    	MessageBox(@MPMINREQNOTMET,SEVERE);
    	abort; 
    endif;
    
    // Check if warning should be prompted
    svVersion1 = MEDIAPORTAL_MINNOWARN_VERSION;
    if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
    	MessageBox(@MPOLDVERSION,WARNING);
    endif;        
    
end;

function NUMBER GetMediaPortalRevision()
	STRING svVersion;
begin
	GetFileVersion(svVersion,"MEDIAPORTAL");
	return GetVersionDigit(svVersion, 4);	
end;

function NUMBER GetVersionDigit(version, digit)
	STRING svString;
	LIST listVersionDigits;
	NUMBER nvVar;
begin

	// Check for valid index
	if (digit < 1 || digit > 4) then
		return -1;
	endif;
                                       
	listVersionDigits = ListCreate(STRINGLIST);
	                                       
    if StrGetTokens(listVersionDigits, version, ".") < 0 then
    	return -1;
    endif;
    
    if ListSetIndex(listVersionDigits, digit - 1) = 0 then
    	ListCurrentString(listVersionDigits, svString);
		StrToNum(nvVar, svString);
		return nvVar;
	else
		return -1;
	endif;
                          
end;

function NUMBER CheckPluginVersions(szQuestion)
	STRING svVersion1, svVersion2;
	STRING szMsg;
	NUMBER nReturn;
begin
    
    nReturn = 0;
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\TVSeries")) then
		// Check that compatible version of plugin is used
		if GetFileVersion(svVersion2,"TVSERIES") = 0 then
			svVersion1 = TVSERIES_MIN_VERSION;
	    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
	    		szQuestion = "Your current version of TV-Series plugin v" + svVersion2 + 
	    					" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
	    					svVersion1;
	    		nReturn=nReturn-1;
	    		
	    	endif;
	    endif;
    endif;
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\MovingPictures")) then
		// Check that compatible version of plugin is used
		if GetFileVersion(svVersion2,"MOVINGPICTURES") = 0 then
			svVersion1 = MOVINGPICTURES_MIN_VERSION;
	    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
		    	if nReturn < 0 then
		    		szQuestion = szQuestion + "\n\n";
		    	endif;
		    	szQuestion = szQuestion + "Your current version of Moving Pictures plugin v" + svVersion2 + 
		    				" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
		    				svVersion1;
		        nReturn = nReturn - 1;
	    	endif;
	    endif;
    endif; 
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\MyLyrics")) then
		// Check that compatible version of plugin is used
		if GetFileVersion(svVersion2,"LYRICS") = 0 then
			svVersion1 = MYLYRICS_MIN_VERSION;
	    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
		    	if nReturn < 0 then
		    		szQuestion = szQuestion + "\n\n";
		    	endif;
		    	szQuestion = szQuestion + "Your current version of My Lyrics plugin v" + svVersion2 + 
		    				" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
		    				svVersion1;
		        nReturn = nReturn - 1;
	    	endif;
	    endif;
    endif; 
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\MyTrailers")) then
		// Check that compatible version of plugin is used
		if GetFileVersion(svVersion2,"TRAILERS") = 0 then
			svVersion1 = TRAILERS_MIN_VERSION;
	    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
		    	if nReturn < 0 then
		    		szQuestion = szQuestion + "\n\n";
		    	endif;
		    	szQuestion = szQuestion + "Your current version of My Trailers plugin v" + svVersion2 + 
		    				" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
		    				svVersion1;
		        nReturn = nReturn - 1;
	    	endif;
	    endif;
    endif; 
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\InfoService")) then
		// Check that compatible version of plugin is used
		if GetFileVersion(svVersion2,"INFOSERVICE") = 0 then
			svVersion1 = INFOSERVICE_MIN_VERSION;
	    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
		    	if nReturn < 0 then
		    		szQuestion = szQuestion + "\n\n";
		    	endif;
		    	szQuestion = szQuestion + "Your current version of InfoService plugin v" + svVersion2 + 
		    				" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
		    				svVersion1;
		        nReturn = nReturn - 1;
	    	endif;
	    endif;
    endif;  
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\GlobalMusicSearch")) then
		// Check that compatible version of plugin is used
		if GetFileVersion(svVersion2,"GLOBALSEARCH") = 0 then
			svVersion1 = GLOBALSEARCH_MIN_VERSION;
	    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
		    	if nReturn < 0 then
		    		szQuestion = szQuestion + "\n\n";
		    	endif;
		    	szQuestion = szQuestion + "Your current version of Global Search plugin v" + svVersion2 + 
		    				" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
		    				svVersion1;
		        nReturn = nReturn - 1;
	    	endif;
	    endif;
    endif;    
    
    if (!FeatureIsItemSelected(MEDIA,"Plugins\\FanartHandler")) then
		// Check that compatible version of plugin is used
		if GetFileVersion(svVersion2,"FANARTHANDLER") = 0 then
			svVersion1 = FANARTHANDLER_MIN_VERSION;
	    	if VerCompare(svVersion1, svVersion2, VERSION) = 0 then
		    	if nReturn < 0 then
		    		szQuestion = szQuestion + "\n\n";
		    	endif;
		    	szQuestion = szQuestion + "Your current version of Fanart-Handler plugin v" + svVersion2 + 
		    				" is not supported by Streamed MP. Its recommended that you select this feature to upgrade to v" +
		    				svVersion1;
		        nReturn = nReturn - 1;
	    	endif;
	    endif;
    endif;

    if nReturn < 0 then
    	szQuestion = szQuestion + "\n\nDo you wish to go back to the select features dialog?";
    endif;
    
    return nReturn;
end;

function NUMBER LaunchBrowser(szSite)
	STRING szKey, szDir;
	STRING svValue, svReturnString1, svReturnString2;
	NUMBER nvType, nvSize;
begin
    RegDBSetDefaultRoot(HKEY_CLASSES_ROOT); 
    
	// Find the value in the registry under "HKey_Classes_Root\.htm" file,
	// to see where the browser address is kept.
	RegDBGetKeyValueEx(".htm", "", nvType, svValue, nvSize);
	
	// Append the return value to Shell\open\command
	// to get the path to executable of the browser
	szKey = svValue+"\\shell\\open\\command";
	RegDBGetKeyValueEx(szKey, "", nvType, svValue, nvSize);
	
	// Because the value in the command usually has %1 or other placeholders,
	// we parse the path to get the directory first and then the file name
	// (this way all the characters after the file name including the placeholder are removed)
	ParsePath(svReturnString1, svValue, PATH);
	ParsePath(svReturnString2, svValue, FILENAME_ONLY);
	
	// Now append the .exe extension to the file name.
	// If the browser is IE, the path contains an extra quote("").
	// By removing the placeholder, we also removed the ending close quote("),
	// but it still has the beginning opening quote ("),
	// so you have to put and ending quote (" to make if a correct path.
	// Netscape does not have the extra "" in the path.
	szDir=svReturnString1^svReturnString2+".exe";
	if ( svReturnString2 = "iexplore" ) then
		szDir=svReturnString1^svReturnString2+".exe\"";
	endif;
	
	// Now the path to the browser is available.
	// You can launch the browser and pass your .htm file as a parameter to it.
	if LaunchAppAndWait(szDir, szSite, NOWAIT) < 0 then
		return -1;
	else
		return 0;
	endif;
	
end;

function VOID MajorUpgradeCleanup()
	STRING szUninstallKey, svSubStr, svValue;
	NUMBER nvSize, nvType;
begin 
	// For some reason InstallShield doesnt cleanup files/settings properly
	// after upgrade, this function removes them manually

    // Check if old Uninstall Entry exists
   	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
   	
   	szUninstallKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\InstallShield_"+g_sMajorUpgradeGUID;
   	if (RegDBKeyExist(szUninstallKey) < 0) then
   		// Nothing to remove
   		return;
   	endif;
   	
   	// Get Path 
	RegDBGetKeyValueEx(szUninstallKey,"LogFile",nvType,svValue,nvSize);
	// Remove filename 'Setup.ilg' to path
	StrSub ( svSubStr, svValue, 0, (StrLength(svValue) - 9) );	
	
	// Remove leftover files/folder from previous install
	DeleteDir(svSubStr,ALLCONTENTS);
	
	RegDBGetKeyValueEx(szUninstallKey,"InstallSource",nvType,svValue,nvSize);
	DeleteDir(svValue,ALLCONTENTS);

    // Remove Uninstall entry in Add/Remove programs
    RegDBDeleteKey(szUninstallKey);
                       
end;

function VOID GetCachedInstallDir()
	STRING	szUninstallKey;
	NUMBER 	nvSize, nvType;
begin                           
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
    szUninstallKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\InstallShield_"+PRODUCT_GUID;
    RegDBGetKeyValueEx(szUninstallKey,"InstallSource",nvType,g_sDownloadInstallDir,nvSize);	
end; 

function VOID UninstallCleanup()
	STRING szDir;
begin 
	// Remove cached downloaded install files                                           
	if (Is(PATH_EXISTS,g_sDownloadInstallDir)) then
    	DeleteDir(g_sDownloadInstallDir,ALLCONTENTS);    	
    endif;
    
    // Remove any rouge XML files from skin directory
    szDir = INSTALLDIR^SKIN_NAME;
    DeleteFile(szDir^"*.xml");
    DeleteDir(szDir,ONLYDIR); 
    
    // Cleanup Virtual Store
    CleanVirtualStoreDir();
    
    // Finially set default skin back to Blue3wide    
    SetMPXMLProperty("skin","name",DEFAULT_SKIN);
        
end; 

function NUMBER SetMPXMLProperty(sSectionAttribute,sEntryAttribute, sValue)
	STRING sFile, sNode, svString;
	OBJECT oXMLdoc, oNodeListRoot, oNodeListElements;
	INT i, j;
begin
   	
   	sFile = g_sConfigDir^"MediaPortal.xml";        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);
		
		sNode = "/profile/section";	    
	    set oNodeListRoot = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Traverse all section elements in xml until 
	    // we reach the the required configuration section    
	    for i=0 to oNodeListRoot.length - 1
		
			if oNodeListRoot(i).Attributes(0).Text = sSectionAttribute then                
                // retrieve the list of configurable elements for the section
            	set oNodeListElements = oNodeListRoot(i).childNodes;
            
            	for j = 0 to oNodeListElements.length - 1
                    
                    // we are only interested in the 'entry' elements
	                if oNodeListElements(j).baseName = "entry" then
	                    
	                    if oNodeListElements(j).Attributes(0).Text = sEntryAttribute then
	                		// set the MediaPortal property
	                        oNodeListElements(j).Text = sValue;	                       
	                    endif;
                
                	endif;	                               
                	
            	endfor;	       
            	
	        endif;
		
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (sFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;
	    set oNodeListRoot = NOTHING;
	    set oNodeListElements = NOTHING;	    	    
	    
	catch                  
		
		Enable(LOGGING);
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;

function NUMBER GetMPXMLProperty(sSectionAttribute, sEntryAttribute, sValue)
	STRING sFile, sNode, svString;
	OBJECT oXMLdoc, oNodeListRoot, oNodeListElements;
	INT i, j;
begin
   	
   	sFile = g_sConfigDir^"MediaPortal.xml";    
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);
		
		sNode = "/profile/section";	    
	    set oNodeListRoot = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Traverse all section elements in xml until 
	    // we reach the the required configuration section    
	    for i=0 to oNodeListRoot.length - 1
		
			if oNodeListRoot(i).Attributes(0).Text = sSectionAttribute then                
                // retrieve the list of configurable elements for the section
            	set oNodeListElements = oNodeListRoot(i).childNodes;
            
            	for j = 0 to oNodeListElements.length - 1
                    
                    // we are only interested in the 'entry' elements
	                if oNodeListElements(j).baseName = "entry" then
	                    
	                    if oNodeListElements(j).Attributes(0).Text = sEntryAttribute then
	                		// Get the MediaPortal property
	                        sValue = oNodeListElements(j).Text;	                       
	                    endif;
                
                	endif;	                               
                	
            	endfor;	       
            	
	        endif;
		
		endfor;   		    
	    	    
	    // release objects used
	    set oXMLdoc = NOTHING;
	    set oNodeListRoot = NOTHING;
	    set oNodeListElements = NOTHING;	    	    
	    
	catch                  
			
	    return -1;    
	    
	endcatch;	       
    
    return 0;
    
end;

/*function NUMBER TVSeriesLayout(g_sSeriesLayout,bSet)
	OBJECT oXMLdoc, oNode; 
	STRING sNode, sFile;
begin
    
    sFile = STREAMEDMP_SKIN_TVSERIESSETTINGS;        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);
		
		sNode = "/settings/views/series";	    
	    set oNode = oXMLdoc.DocumentElement.SelectSingleNode(sNode); 	    	    
		
		if bSet then				       		    	  
		
			oNode.Attributes.getNamedItem("layout").Text = g_sSeriesLayout;
		    // save the xml	    
		    oXMLdoc.Save (sFile);		   
		
		else
			g_sSeriesLayout = oNode.Attributes.getNamedItem("layout").Text;			
		endif;
	 		 	
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNode = NOTHING;  	    
	    
	catch                  
		
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;*/

function NUMBER GetXMLProperty(sFile, sNode, sPropertyValue)
	OBJECT oXMLdoc, oNode; 
begin
		
	try		
		// Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
	    set oNode = oXMLdoc.DocumentElement.SelectSingleNode(sNode);
	    
	    // return property
	    sPropertyValue = oNode.Text;
					 	
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNode = NOTHING;  	    
	    
	catch                  
		
	    return -1;    
	    
	endcatch;	       
  
    return 0;
    
end;

function NUMBER SetXMLProperty(sFile, sNode, sPropertyValue)
	OBJECT oXMLdoc, oNode; 
begin
	
	Disable(LOGGING);
		
	try		
		// Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
	    set oNode = oXMLdoc.DocumentElement.SelectSingleNode(sNode);
	    
	    // Set property
	    oNode.Text = sPropertyValue;
		
		// Save XML
		oXMLdoc.Save (sFile);		
		
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNode = NOTHING;  	    
	    
	catch                  
		
		Enable(LOGGING);
	    return -1;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return 0;
    
end;
       
function VOID CleanVirtualStoreDir()
	STRING szValue, szVirtualStore;
	NUMBER nResult;
begin    
    // Remove Vista's Virtual Store directory for the StreamedMP Skin
    // We do this just incase a user with UAC enabled manually updated settings!    
    Disable(LOGGING);
    
 	try   
		nResult = SHFolder.SHGetFolderPathA(NULL, CSIDL_PROFILE, NULL, 0, szValue);
	    if nResult = 0 then
	    	szVirtualStore = szValue ^ "AppData\\Local\\VirtualStore\\Program Files\\Team MediaPortal\\MediaPortal\\Skin\\StreamedMP";
	    	if Is(PATH_EXISTS,szVirtualStore) then
	    		DeleteDir(szVirtualStore,ALLCONTENTS);
	    	endif;   
	    	szVirtualStore = szValue ^ "AppData\\Local\\VirtualStore\\Program Files (x86)\\Team MediaPortal\\MediaPortal\\Skin\\StreamedMP";
	    	if Is(PATH_EXISTS,szVirtualStore) then
	    		DeleteDir(szVirtualStore,ALLCONTENTS);
	    	endif;
	    	szVirtualStore = szValue ^ "AppData\\Local\\VirtualStore\\ProgramData\\Team MediaPortal\\MediaPortal\\Cache\\StreamedMP";
	    	if Is(PATH_EXISTS,szVirtualStore) then
	    		DeleteDir(szVirtualStore,ALLCONTENTS);
	    	endif;
	    endif;	    
	catch
		Enable(LOGGING);
		return;
	endcatch;	
	
	Enable(LOGGING);
	
end;

function VOID TVSeriesIcons(bAdd)
	OBJECT oXMLdoc, oNodeList;
	STRING sNode, sFile, szString, szFindStr, szReplaceStr;
	INT i;
begin   

	sFile = STREAMEDMP_SKIN_TVSERIES;
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
		
	    sNode = "/window/define";	    
	    set oNodeList = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Examine all <defines> and set texture
	    for i=0 to oNodeList.length - 1
		 	
		 	szString = oNodeList.Item(i).Text;
		 	
		 	szFindStr = "#overlaywubg:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "overlaywubg.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#tvseries_Watched:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_Watched.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#tvseries_UnWatched:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_UnWatched.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  
		    
		   	szFindStr = "#tvseries_WatchedNA:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_WatchedNA.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#tvseries_UnWatchedNA:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "tvseries_UnWatchedNA.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  		    		   
		    
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (sFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNodeList = NOTHING;	    	    
	    
	catch                  
		
		Enable(LOGGING);
	    return;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return;
		
end;

function VOID RoundedCovers(bAdd, sSkin)
	OBJECT oXMLdoc, oNodeList;
	STRING sNode, sFile, szString, szFindStr, szReplaceStr;
	INT i;
begin   
       
    if sSkin = "TVSeries" then
    	sFile = STREAMEDMP_SKIN_TVSERIES;		
		szFindStr = "#tvseries_RoundedPosters:";
	else
		sFile = STREAMEDMP_SKIN_MOVINGPICTURES;    
		szFindStr = "#movingpictures_RoundedPosters:";
	endif;
	
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
		
	    sNode = "/window/define";	    
	    set oNodeList = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Examine all <defines> and set texture
	    for i=0 to oNodeList.length - 1
		 	
		 	szString = oNodeList.Item(i).Text;
		 	
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bAdd then
					szReplaceStr = szFindStr + "round.poster.frame.png";
				else
					szReplaceStr = szFindStr + "-";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;		      	    		   
		    
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (sFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNodeList = NOTHING;	    	    
	    
	catch                  
		
		Enable(LOGGING);
	    return;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return;
		
end;

function VOID TVSeriesImageStyle(bShowUnWatchedOnly)
	OBJECT oXMLdoc, oNodeList;
	STRING sNode, sFile, szString, szFindStr, szReplaceStr;
	INT i;
begin   

	sFile = STREAMEDMP_SKIN_TVSERIES;        	 
    Disable(LOGGING);
    
    try
	    // Prepare XML parser object
	    set oXMLdoc = CreateObject("Microsoft.XMLDOM");
	    
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
	    
	    // Load the document 	    
		oXMLdoc.Load (sFile);	
		
	    sNode = "/window/define";	    
	    set oNodeList = oXMLdoc.DocumentElement.SelectNodes(sNode); 	    	    
	    
	    // Examine all <defines> and set texture
	    for i=0 to oNodeList.length - 1
		 	
		 	szString = oNodeList.Item(i).Text;
		 	
		 	szFindStr = "#posX:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "730";
				else
					szReplaceStr = szFindStr + "760";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#IconXOff:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "384";
				else
					szReplaceStr = szFindStr + "389";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#IconYOff:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "11";
				else
					szReplaceStr = szFindStr + "12";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  
		    
		   	szFindStr = "#textXOff:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "-65";
				else
					szReplaceStr = szFindStr + "-75";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;
		    
		    szFindStr = "#textXOff2:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "548";
				else
					szReplaceStr = szFindStr + "380";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif; 
		    
		    szFindStr = "#textXOff3:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "407";
				else
					szReplaceStr = szFindStr + "415";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  		    		   
		    
		    szFindStr = "#textureFocus:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "listbg_detail2_fo.png";
				else
					szReplaceStr = szFindStr + "listbg_detail_fo.png";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;  		    		   
		    
		    /*szFindStr = "#font:";
		 	if StrFind(szString,szFindStr) = 0 then
				
				if bShowUnWatchedOnly then
					szReplaceStr = szFindStr + "mediastream11c";
				else
					szReplaceStr = szFindStr + "mediastream12c";              
				endif;
				oNodeList.Item(i).Text = szReplaceStr;
				
		    endif;*/
		    
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (sFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;	    
	    set oNodeList = NOTHING;	    	    
	    
	catch                  
		
		Enable(LOGGING);
	    return;    
	    
	endcatch;	       

    Enable(LOGGING);         
    return;
		
end;

function VOID EnableControl(szDialogName, nControl, bState)
	HWND hwndDlg;	
begin
	hwndDlg = CmdGetHwndDlg( szDialogName );
	EnableWindow( GetDlgItem( hwndDlg, nControl), bState);	
end; 

function NUMBER SetSkinDefine(szFile, szDefine, szValue)
	OBJECT oXMLdoc, oNodes;
	STRING sNode;
	INT i;
begin
	Disable(LOGGING);
	
	try
		// Prepare XML parser object
		set oXMLdoc = CreateObject("Microsoft.XMLDOM");
		
		oXMLdoc.async = FALSE;
		oXMLdoc.preserveWhiteSpace = TRUE;
		
		// Load the document 	    
		oXMLdoc.Load (szFile);
		
		sNode = "/window/define";	    
	    set oNodes = oXMLdoc.DocumentElement.SelectNodes(sNode);
		
		// Traverse all defines in xml until 
	    // we reach 'szDefine'
	    for i=0 to oNodes.length - 1
		
			if oNodes(i).Text % szDefine then                
                // Match found
                oNodes(i).Text = szDefine + ":" + szValue;
	        endif;
		
		endfor;   		    
	    
	    // save the xml	    
	    oXMLdoc.Save (szFile);
	    
	    // release objects used
	    set oXMLdoc = NOTHING;
	    set oNodes = NOTHING;	   
	    
	catch
	    
	    Enable(LOGGING);
		return -1;
		
	endcatch;
	
	Enable(LOGGING);
	return 0;

end;
    
function NUMBER ReplaceLineInFile(szFileName, szSearchStr, szReplaceStr)
	NUMBER nResult, nIndex;
	STRING svString;
	LIST listID;	
begin    
 	
 	Disable(LOGGING);

	listID = ListCreate(STRINGLIST);
	ListReadFromFile ( listID, szFileName );
	
	nResult = ListGetFirstString(listID, svString);
	
	while (nResult != END_OF_LIST)		
		if (svString % szSearchStr) then		
			// Replace Line
			ListSetCurrentString ( listID, szReplaceStr );			
		endif;
		nResult = ListGetNextString(listID, svString);		
	endwhile;
	
	// Delete old file
	DeleteFile(szFileName);
	// Create new file
	ListWriteToFile(listID,szFileName);
	
	ListDestroy(listID);
	
	Enable(LOGGING);
	return 0;
	   
end;
  
function BOOL AdjustForScreenSize()
	NUMBER nvDx, nvDy;
	STRING sValue;
begin
	
	// Get Screen Dimmensions
	if GetExtents ( nvDx, nvDy ) < 0 then
		return FALSE;
	endif;
	
	// Dont Adjust if not 1920 wide, we dont want to support any other resolution at this time
	if nvDx != 1920 then
		return FALSE;	
	endif;
	
	// Check if MediaPortal is Running in Full Screen
	// If not then it will run in Windowed Mode using default resolution
	GetMPXMLProperty("general","startfullscreen", sValue);
	if sValue = "yes" then
		return TRUE;
	else
		return FALSE;
	endif;	
	
end; 

// This function will modify skin files that runing 1920x1080 screen resolution
// and are also running MediaPortal in Fullscreen
function VOID ModifySkinFilesForFULLHD(b1920)
	STRING szFileName, szSearchStr, szReplaceStr;
	STRING szDefine, szValue;
begin
    
    // Adjust TVSeries Watched / Unwatched string
    // Using 1920 wide the watched value is displaced further from the watched icon...dont ask me why!    
    szFileName = STREAMEDMP_SKIN_TVSERIESSETTINGS;
    
    // String replacement will only occur if a match ie. currently has the wrong value
    if b1920 then
	    // Needs adjustments by 2 pixls to the left
	    szSearchStr = "<Enabled>1<Format>SeriesWatchedAndUnWatched<FormatAs>Eval(PrettyNumber100(<Series.EpisodesUnWatched>))         Eval(PrettyNumber100(<Series.EpisodeCount>-<Series.EpisodesUnWatched>))";
	    szReplaceStr = "<Enabled>1<Format>SeriesWatchedAndUnWatched<FormatAs>Eval(PrettyNumber100(<Series.EpisodesUnWatched>))       Eval(PrettyNumber100(<Series.EpisodeCount>-<Series.EpisodesUnWatched>))";    
	    ReplaceLineInFile(szFileName, szSearchStr, szReplaceStr);
	    
	    szSearchStr = "<Enabled>1<Format>SeasonWatchedAndUnWatched<FormatAs>Eval(PrettyNumber10(<Season.EpisodesUnWatched>))          Eval(PrettyNumber10(<Season.EpisodeCount>-<Season.EpisodesUnWatched>))";
	    szReplaceStr = "<Enabled>1<Format>SeasonWatchedAndUnWatched<FormatAs>Eval(PrettyNumber10(<Season.EpisodesUnWatched>))         Eval(PrettyNumber10(<Season.EpisodeCount>-<Season.EpisodesUnWatched>))";    
	    ReplaceLineInFile(szFileName, szSearchStr, szReplaceStr);
	else        
	    szSearchStr = "<Enabled>1<Format>SeriesWatchedAndUnWatched<FormatAs>Eval(PrettyNumber100(<Series.EpisodesUnWatched>))       Eval(PrettyNumber100(<Series.EpisodeCount>-<Series.EpisodesUnWatched>))";
	    szReplaceStr = "<Enabled>1<Format>SeriesWatchedAndUnWatched<FormatAs>Eval(PrettyNumber100(<Series.EpisodesUnWatched>))         Eval(PrettyNumber100(<Series.EpisodeCount>-<Series.EpisodesUnWatched>))";    
	    ReplaceLineInFile(szFileName, szSearchStr, szReplaceStr);
	    
	    szSearchStr = "<Enabled>1<Format>SeasonWatchedAndUnWatched<FormatAs>Eval(PrettyNumber10(<Season.EpisodesUnWatched>))         Eval(PrettyNumber10(<Season.EpisodeCount>-<Season.EpisodesUnWatched>))";
	    szReplaceStr = "<Enabled>1<Format>SeasonWatchedAndUnWatched<FormatAs>Eval(PrettyNumber10(<Season.EpisodesUnWatched>))          Eval(PrettyNumber10(<Season.EpisodeCount>-<Season.EpisodesUnWatched>))";    
	    ReplaceLineInFile(szFileName, szSearchStr, szReplaceStr);    
    endif; 
    
    // Modify ImageList controls in MyMusic
    // ImageList Controls do not scale
    if b1920 then
    	szDefine = "#star.rating.size";
    	szValue = "48";
    	SetSkinDefine(STREAMEDMP_SKIN_MUSICNOWPLAYING, szDefine, szValue);
    	SetSkinDefine(STREAMEDMP_SKIN_MUSICNOWPLAYINGANVU, szDefine, szValue);
    	SetSkinDefine(STREAMEDMP_SKIN_MUSICNOWPLAYINGLEDVU, szDefine, szValue);
    else
    	szDefine = "#star.rating.size";
    	szValue = "32";
    	SetSkinDefine(STREAMEDMP_SKIN_MUSICNOWPLAYING, szDefine, szValue);
    	SetSkinDefine(STREAMEDMP_SKIN_MUSICNOWPLAYINGANVU, szDefine, szValue);
    	SetSkinDefine(STREAMEDMP_SKIN_MUSICNOWPLAYINGLEDVU, szDefine, szValue);          
    endif;   
    
end; 

function void DetectWinLargeFonts()
	STRING szKey, svValue, szMessage;
	NUMBER nvType, nvSize, nvValue;
begin
	// Detect Windows Font Size
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	
	szKey = "Control Panel\\Desktop\\WindowMetrics";
	if RegDBGetKeyValueEx(szKey,"AppliedDPI", nvType, svValue, nvSize) < 0 then
		svValue = "96";
	endif;
	StrToNum(nvValue, svValue);
	
	// StreamedMP does not support Windows Fonts > 96dpi
	if nvValue > 96 then
			
		szMessage = "WARNING: Large Fonts setting has been detected in windows,\n";
		szMessage = szMessage + "this is not supported by StreamedMP. We recommend you set\n";
		szMessage = szMessage + "your font setting back to Default before starting\n";
		szMessage = szMessage + "MediaPortal.";
		
		MessageBox(szMessage,WARNING);
		
	endif;
end;

function string BoolToString(bState)
	STRING sReturn;
begin
    if bState then
    	sReturn = "Yes";
    else
    	sReturn = "No";
    endif;
    return sReturn;
end;



